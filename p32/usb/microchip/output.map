
Allocating common symbols
Common symbol       size              file

pDst                0x4               obj/usb_device.o
USBDeferINDataStagePackets
                    0x4               obj/usb_device.o
BDT                 0x40              obj/usb_device.o
ProgrammingBuffer   0x80              obj/main.o
CtrlTrfData         0x40              obj/usb_device.o
BootState           0x1               obj/main.o
hid_report_out      0x40              obj/usb_device.o
USBDeferOUTDataStagePackets
                    0x4               obj/usb_device.o
USBDeviceState      0x4               obj/usb_device.o
controlTransferState
                    0x1               obj/usb_device.o
endpoint_number     0x1               obj/usb_device.o
inPipes             0x10              obj/usb_device.o
pBDTEntryIn         0x8               obj/usb_device.o
PacketToPC          0x40              obj/main.o
hid_report_in       0x40              obj/usb_device.o
ep_data_out         0x2               obj/usb_device.o
USBStatusStageEnabledFlag1
                    0x4               obj/usb_device.o
PacketFromPC        0x40              obj/main.o
ConfigsProtected    0x1               obj/main.o
ProgrammedPointer   0x4               obj/main.o
USBStatusStageEnabledFlag2
                    0x4               obj/usb_device.o
pBDTEntryOut        0x8               obj/usb_device.o
BothEP0OutUOWNsSet  0x4               obj/usb_device.o
pBDTEntryEP0OutNext
                    0x4               obj/usb_device.o
PacketFromPCBuffer  0x40              obj/main.o
USBBusIsSuspended   0x4               obj/usb_device.o
BufferedDataIndex   0x1               obj/main.o
USBStatusStageTimeoutCounter
                    0x1               obj/usb_device.o
SetupPkt            0x8               obj/usb_device.o
ep_data_in          0x2               obj/usb_device.o
active_protocol     0x1               obj/usb_function_hid.o
ErasePageTracker    0x1               obj/main.o
shortPacketStatus   0x1               obj/usb_device.o
pBDTEntryEP0OutCurrent
                    0x4               obj/usb_device.o
USBActiveConfiguration
                    0x1               obj/usb_device.o
RemoteWakeup        0x4               obj/usb_device.o
USTATcopy           0x1               obj/usb_device.o
USBAlternateInterface
                    0x1               obj/usb_device.o
outPipes            0xb               obj/usb_device.o
USBDeferStatusStagePacket
                    0x4               obj/usb_device.o
idle_rate           0x1               obj/usb_function_hid.o

Discarded input sections

 .text          0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
 .data          0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
 .reginfo       0x0000000000000000       0x18 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
 .pdr           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
 .init          0x0000000000000000        0x8 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
 .fini          0x0000000000000000        0x8 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
 .text          0x0000000000000000      0x1b4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .data          0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .bss           0x0000000000000000       0x20 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .reginfo       0x0000000000000000       0x18 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .ctors         0x0000000000000000        0x4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .dtors         0x0000000000000000        0x4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .jcr           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .tm_clone_table
                0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .sdata         0x0000000000000000        0x4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .fini          0x0000000000000000       0x10 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .init          0x0000000000000000       0x10 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .text          0x0000000000000000        0x0 obj/usb_function_hid.o
 .data          0x0000000000000000        0x0 obj/usb_function_hid.o
 .bss           0x0000000000000000        0x0 obj/usb_function_hid.o
 .reginfo       0x0000000000000000       0x18 obj/usb_function_hid.o
 .pdr           0x0000000000000000       0x20 obj/usb_function_hid.o
 .text          0x0000000000000000        0x0 obj/usb_device.o
 .data          0x0000000000000000        0x0 obj/usb_device.o
 .bss           0x0000000000000000        0x0 obj/usb_device.o
 .reginfo       0x0000000000000000       0x18 obj/usb_device.o
 .pdr           0x0000000000000000      0x120 obj/usb_device.o
 .text.USBStallEndpoint
                0x0000000000000000       0xc0 obj/usb_device.o
 .text.USBCancelIO
                0x0000000000000000       0xe0 obj/usb_device.o
 .text          0x0000000000000000        0x0 obj/usb_descriptors.o
 .data          0x0000000000000000        0x0 obj/usb_descriptors.o
 .bss           0x0000000000000000        0x0 obj/usb_descriptors.o
 .reginfo       0x0000000000000000       0x18 obj/usb_descriptors.o
 .text          0x0000000000000000        0x0 obj/main.o
 .data          0x0000000000000000        0x0 obj/main.o
 .bss           0x0000000000000000        0x0 obj/main.o
 .reginfo       0x0000000000000000       0x18 obj/main.o
 .pdr           0x0000000000000000      0x120 obj/main.o
 .data          0x0000000000000000        0x0 /tmp/ccJegnDK.o
 .bss           0x0000000000000000        0x0 /tmp/ccJegnDK.o
 .reginfo       0x0000000000000000       0x18 /tmp/ccJegnDK.o
 .pdr           0x0000000000000000       0xa0 /tmp/ccJegnDK.o
 .bev_handler   0x0000000000000000        0x4 /tmp/ccJegnDK.o
 .text          0x0000000000000000        0x0 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
 .data          0x0000000000000000        0x0 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
 .bss           0x0000000000000000        0x0 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
 .reginfo       0x0000000000000000       0x18 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
 .text          0x0000000000000000       0x60 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .data          0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .reginfo       0x0000000000000000       0x18 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .ctors         0x0000000000000000        0x4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .dtors         0x0000000000000000        0x4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .jcr           0x0000000000000000        0x4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .tm_clone_table
                0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .init          0x0000000000000000       0x10 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 .text          0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
 .data          0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
 .reginfo       0x0000000000000000       0x18 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
 .pdr           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
 .init          0x0000000000000000       0x10 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
 .fini          0x0000000000000000       0x10 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
 .text          0x0000000000000000        0x0 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
 .data          0x0000000000000000        0x0 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
 .bss           0x0000000000000000        0x0 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
 .reginfo       0x0000000000000000       0x18 /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o

Memory Configuration

Name             Origin             Length             Attributes
exception_mem    0x000000009d000000 0x0000000000001000
kseg0_program_mem 0x000000009d001000 0x000000000003f000 xr
kseg1_boot_mem   0x00000000bfc00000 0x0000000000000490
kseg0_boot_mem   0x000000009fc00490 0x0000000000000200
debug_exec_mem   0x000000009fc00690 0x0000000000000560
config3          0x00000000bfc00bf0 0x0000000000000004
config2          0x00000000bfc00bf4 0x0000000000000004
config1          0x00000000bfc00bf8 0x0000000000000004
config0          0x00000000bfc00bfc 0x0000000000000004
configsfrs       0x00000000bfc00bf0 0x0000000000000010
sfrs             0x00000000bf800000 0x0000000000100000
kseg1_data_mem   0x00000000a0000000 0x0000000000010000 w !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crti.o
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/../../../../mips-elf/lib/libm.a
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/libgcc.a
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/../../../../mips-elf/lib/libc.a
LOAD obj/usb_function_hid.o
LOAD obj/usb_device.o
LOAD obj/usb_descriptors.o
LOAD obj/main.o
LOAD /tmp/ccJegnDK.o
LOAD /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/../../../../mips-elf/lib/libm.a
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/libgcc.a
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/../../../../mips-elf/lib/libc.a
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/libgcc.a
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/libgcc.a
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
LOAD /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtn.o
LOAD /dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/microchip/obj/non-free/processor.o
                0x0000000000000400                PROVIDE (_min_stack_size, 0x400)
                0x0000000000000000                PROVIDE (_min_heap_size, 0x0)
                0x0000000000000001                PROVIDE (_vector_spacing, 0x1)
                0x000000009d000000                _ebase_address = 0x9d000000
                0x00000000bfc00000                _RESET_ADDR = 0xbfc00000
                0x00000000bfc00380                _BEV_EXCPT_ADDR = 0xbfc00380
                0x00000000bfc00480                _DBG_EXCPT_ADDR = 0xbfc00480
                0x000000009fc00490                _DBG_CODE_ADDR = 0x9fc00490
                0x0000000000000560                _DBG_CODE_SIZE = 0x560
                0x000000009d000180                _GEN_EXCPT_ADDR = (_ebase_address + 0x180)

.reset          0x00000000bfc00000       0x10
 *(.reset)
 .reset         0x00000000bfc00000       0x10 /tmp/ccJegnDK.o
                0x00000000bfc00000                _reset
 *(.reset)

.startup        0x000000009fc00490      0x1bc
 *(.startup)
 .startup       0x000000009fc00490      0x1bc /tmp/ccJegnDK.o
 *(.startup)

.config_BFC00BF0
 *(.config_BFC00BF0)
 *(.config_BFC00BF0)

.config_BFC00BF4
 *(.config_BFC00BF4)
 *(.config_BFC00BF4)

.config_BFC00BF8
 *(.config_BFC00BF8)
 *(.config_BFC00BF8)

.config_BFC00BFC
 *(.config_BFC00BFC)
 *(.config_BFC00BFC)

.app_excpt      0x000000009d000180        0x4
 *(.gen_handler)
 .gen_handler   0x000000009d000180        0x4 /tmp/ccJegnDK.o

.vector_0       0x000000009d000200        0x0
 *(.vector_0)
 *(.vector_0)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_0) <= (_vector_spacing << 0x5))), function at exception vector 0 too large)

.vector_1       0x000000009d000220        0x0
 *(.vector_1)
 *(.vector_1)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_1) <= (_vector_spacing << 0x5))), function at exception vector 1 too large)

.vector_2       0x000000009d000240        0x0
 *(.vector_2)
 *(.vector_2)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_2) <= (_vector_spacing << 0x5))), function at exception vector 2 too large)

.vector_3       0x000000009d000260        0x0
 *(.vector_3)
 *(.vector_3)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_3) <= (_vector_spacing << 0x5))), function at exception vector 3 too large)

.vector_4       0x000000009d000280        0x0
 *(.vector_4)
 *(.vector_4)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_4) <= (_vector_spacing << 0x5))), function at exception vector 4 too large)

.vector_5       0x000000009d0002a0        0x0
 *(.vector_5)
 *(.vector_5)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_5) <= (_vector_spacing << 0x5))), function at exception vector 5 too large)

.vector_6       0x000000009d0002c0        0x0
 *(.vector_6)
 *(.vector_6)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_6) <= (_vector_spacing << 0x5))), function at exception vector 6 too large)

.vector_7       0x000000009d0002e0        0x0
 *(.vector_7)
 *(.vector_7)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_7) <= (_vector_spacing << 0x5))), function at exception vector 7 too large)

.vector_8       0x000000009d000300        0x0
 *(.vector_8)
 *(.vector_8)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_8) <= (_vector_spacing << 0x5))), function at exception vector 8 too large)

.vector_9       0x000000009d000320        0x0
 *(.vector_9)
 *(.vector_9)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_9) <= (_vector_spacing << 0x5))), function at exception vector 9 too large)

.vector_10      0x000000009d000340        0x0
 *(.vector_10)
 *(.vector_10)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_10) <= (_vector_spacing << 0x5))), function at exception vector 10 too large)

.vector_11      0x000000009d000360        0x0
 *(.vector_11)
 *(.vector_11)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_11) <= (_vector_spacing << 0x5))), function at exception vector 11 too large)

.vector_12      0x000000009d000380        0x0
 *(.vector_12)
 *(.vector_12)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_12) <= (_vector_spacing << 0x5))), function at exception vector 12 too large)

.vector_13      0x000000009d0003a0        0x0
 *(.vector_13)
 *(.vector_13)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_13) <= (_vector_spacing << 0x5))), function at exception vector 13 too large)

.vector_14      0x000000009d0003c0        0x0
 *(.vector_14)
 *(.vector_14)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_14) <= (_vector_spacing << 0x5))), function at exception vector 14 too large)

.vector_15      0x000000009d0003e0        0x0
 *(.vector_15)
 *(.vector_15)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_15) <= (_vector_spacing << 0x5))), function at exception vector 15 too large)

.vector_16      0x000000009d000400        0x0
 *(.vector_16)
 *(.vector_16)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_16) <= (_vector_spacing << 0x5))), function at exception vector 16 too large)

.vector_17      0x000000009d000420        0x0
 *(.vector_17)
 *(.vector_17)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_17) <= (_vector_spacing << 0x5))), function at exception vector 17 too large)

.vector_18      0x000000009d000440        0x0
 *(.vector_18)
 *(.vector_18)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_18) <= (_vector_spacing << 0x5))), function at exception vector 18 too large)

.vector_19      0x000000009d000460        0x0
 *(.vector_19)
 *(.vector_19)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_19) <= (_vector_spacing << 0x5))), function at exception vector 19 too large)

.vector_20      0x000000009d000480        0x0
 *(.vector_20)
 *(.vector_20)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_20) <= (_vector_spacing << 0x5))), function at exception vector 20 too large)

.vector_21      0x000000009d0004a0        0x0
 *(.vector_21)
 *(.vector_21)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_21) <= (_vector_spacing << 0x5))), function at exception vector 21 too large)

.vector_22      0x000000009d0004c0        0x0
 *(.vector_22)
 *(.vector_22)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_22) <= (_vector_spacing << 0x5))), function at exception vector 22 too large)

.vector_23      0x000000009d0004e0        0x0
 *(.vector_23)
 *(.vector_23)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_23) <= (_vector_spacing << 0x5))), function at exception vector 23 too large)

.vector_24      0x000000009d000500        0x0
 *(.vector_24)
 *(.vector_24)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_24) <= (_vector_spacing << 0x5))), function at exception vector 24 too large)

.vector_25      0x000000009d000520        0x0
 *(.vector_25)
 *(.vector_25)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_25) <= (_vector_spacing << 0x5))), function at exception vector 25 too large)

.vector_26      0x000000009d000540        0x0
 *(.vector_26)
 *(.vector_26)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_26) <= (_vector_spacing << 0x5))), function at exception vector 26 too large)

.vector_27      0x000000009d000560        0x0
 *(.vector_27)
 *(.vector_27)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_27) <= (_vector_spacing << 0x5))), function at exception vector 27 too large)

.vector_28      0x000000009d000580        0x0
 *(.vector_28)
 *(.vector_28)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_28) <= (_vector_spacing << 0x5))), function at exception vector 28 too large)

.vector_29      0x000000009d0005a0        0x0
 *(.vector_29)
 *(.vector_29)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_29) <= (_vector_spacing << 0x5))), function at exception vector 29 too large)

.vector_30      0x000000009d0005c0        0x0
 *(.vector_30)
 *(.vector_30)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_30) <= (_vector_spacing << 0x5))), function at exception vector 30 too large)

.vector_31      0x000000009d0005e0        0x0
 *(.vector_31)
 *(.vector_31)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_31) <= (_vector_spacing << 0x5))), function at exception vector 31 too large)

.vector_32      0x000000009d000600        0x0
 *(.vector_32)
 *(.vector_32)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_32) <= (_vector_spacing << 0x5))), function at exception vector 32 too large)

.vector_33      0x000000009d000620        0x0
 *(.vector_33)
 *(.vector_33)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_33) <= (_vector_spacing << 0x5))), function at exception vector 33 too large)

.vector_34      0x000000009d000640        0x0
 *(.vector_34)
 *(.vector_34)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_34) <= (_vector_spacing << 0x5))), function at exception vector 34 too large)

.vector_35      0x000000009d000660        0x0
 *(.vector_35)
 *(.vector_35)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_35) <= (_vector_spacing << 0x5))), function at exception vector 35 too large)

.vector_36      0x000000009d000680        0x0
 *(.vector_36)
 *(.vector_36)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_36) <= (_vector_spacing << 0x5))), function at exception vector 36 too large)

.vector_37      0x000000009d0006a0        0x0
 *(.vector_37)
 *(.vector_37)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_37) <= (_vector_spacing << 0x5))), function at exception vector 37 too large)

.vector_38      0x000000009d0006c0        0x0
 *(.vector_38)
 *(.vector_38)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_38) <= (_vector_spacing << 0x5))), function at exception vector 38 too large)

.vector_39      0x000000009d0006e0        0x0
 *(.vector_39)
 *(.vector_39)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_39) <= (_vector_spacing << 0x5))), function at exception vector 39 too large)

.vector_40      0x000000009d000700        0x0
 *(.vector_40)
 *(.vector_40)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_40) <= (_vector_spacing << 0x5))), function at exception vector 40 too large)

.vector_41      0x000000009d000720        0x0
 *(.vector_41)
 *(.vector_41)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_41) <= (_vector_spacing << 0x5))), function at exception vector 41 too large)

.vector_42      0x000000009d000740        0x0
 *(.vector_42)
 *(.vector_42)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_42) <= (_vector_spacing << 0x5))), function at exception vector 42 too large)

.vector_43      0x000000009d000760        0x0
 *(.vector_43)
 *(.vector_43)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_43) <= (_vector_spacing << 0x5))), function at exception vector 43 too large)

.vector_44      0x000000009d000780        0x0
 *(.vector_44)
 *(.vector_44)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_44) <= (_vector_spacing << 0x5))), function at exception vector 44 too large)

.vector_45      0x000000009d0007a0        0x0
 *(.vector_45)
 *(.vector_45)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_45) <= (_vector_spacing << 0x5))), function at exception vector 45 too large)

.vector_46      0x000000009d0007c0        0x0
 *(.vector_46)
 *(.vector_46)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_46) <= (_vector_spacing << 0x5))), function at exception vector 46 too large)

.vector_47      0x000000009d0007e0        0x0
 *(.vector_47)
 *(.vector_47)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_47) <= (_vector_spacing << 0x5))), function at exception vector 47 too large)

.vector_48      0x000000009d000800        0x0
 *(.vector_48)
 *(.vector_48)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_48) <= (_vector_spacing << 0x5))), function at exception vector 48 too large)

.vector_49      0x000000009d000820        0x0
 *(.vector_49)
 *(.vector_49)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_49) <= (_vector_spacing << 0x5))), function at exception vector 49 too large)

.vector_50      0x000000009d000840        0x0
 *(.vector_50)
 *(.vector_50)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_50) <= (_vector_spacing << 0x5))), function at exception vector 50 too large)

.vector_51      0x000000009d000860        0x0
 *(.vector_51)
 *(.vector_51)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_51) <= (_vector_spacing << 0x5))), function at exception vector 51 too large)

.vector_52      0x000000009d000880        0x0
 *(.vector_52)
 *(.vector_52)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_52) <= (_vector_spacing << 0x5))), function at exception vector 52 too large)

.vector_53      0x000000009d0008a0        0x0
 *(.vector_53)
 *(.vector_53)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_53) <= (_vector_spacing << 0x5))), function at exception vector 53 too large)

.vector_54      0x000000009d0008c0        0x0
 *(.vector_54)
 *(.vector_54)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_54) <= (_vector_spacing << 0x5))), function at exception vector 54 too large)

.vector_55      0x000000009d0008e0        0x0
 *(.vector_55)
 *(.vector_55)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_55) <= (_vector_spacing << 0x5))), function at exception vector 55 too large)

.vector_56      0x000000009d000900        0x0
 *(.vector_56)
 *(.vector_56)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_56) <= (_vector_spacing << 0x5))), function at exception vector 56 too large)

.vector_57      0x000000009d000920        0x0
 *(.vector_57)
 *(.vector_57)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_57) <= (_vector_spacing << 0x5))), function at exception vector 57 too large)

.vector_58      0x000000009d000940        0x0
 *(.vector_58)
 *(.vector_58)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_58) <= (_vector_spacing << 0x5))), function at exception vector 58 too large)

.vector_59      0x000000009d000960        0x0
 *(.vector_59)
 *(.vector_59)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_59) <= (_vector_spacing << 0x5))), function at exception vector 59 too large)

.vector_60      0x000000009d000980        0x0
 *(.vector_60)
 *(.vector_60)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_60) <= (_vector_spacing << 0x5))), function at exception vector 60 too large)

.vector_61      0x000000009d0009a0        0x0
 *(.vector_61)
 *(.vector_61)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_61) <= (_vector_spacing << 0x5))), function at exception vector 61 too large)

.vector_62      0x000000009d0009c0        0x0
 *(.vector_62)
 *(.vector_62)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_62) <= (_vector_spacing << 0x5))), function at exception vector 62 too large)

.vector_63      0x000000009d0009e0        0x0
 *(.vector_63)
 *(.vector_63)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_63) <= (_vector_spacing << 0x5))), function at exception vector 63 too large)

.text           0x000000009d001000     0x218c
                0x000000009d001000                _text_begin = .
 *(.text .stub .text.* .gnu.linkonce.t.*)
 .text.USBCheckHIDRequest
                0x000000009d001000      0x188 obj/usb_function_hid.o
                0x000000009d001000                USBCheckHIDRequest
 .text.USBCtrlTrfTxService
                0x000000009d001188       0xf8 obj/usb_device.o
 .text.USBDeviceInit
                0x000000009d001280      0x22c obj/usb_device.o
                0x000000009d001280                USBDeviceInit
 .text.USBCtrlEPAllowStatusStage
                0x000000009d0014ac       0xfc obj/usb_device.o
                0x000000009d0014ac                USBCtrlEPAllowStatusStage
 .text.USBCtrlEPAllowDataStage
                0x000000009d0015a8       0xf4 obj/usb_device.o
                0x000000009d0015a8                USBCtrlEPAllowDataStage
 .text.USBDeviceTasks
                0x000000009d00169c     0x115c obj/usb_device.o
                0x000000009d00169c                USBDeviceTasks
 .text.USBEnableEndpoint
                0x000000009d0027f8       0xd0 obj/usb_device.o
                0x000000009d0027f8                USBEnableEndpoint
 .text.USBTransferOnePacket
                0x000000009d0028c8       0xec obj/usb_device.o
                0x000000009d0028c8                USBTransferOnePacket
 .text.SoftReset
                0x000000009d0029b4       0x78 obj/main.o
                0x000000009d0029b4                SoftReset
 .text.DelayUs  0x000000009d002a2c       0x28 obj/main.o
                0x000000009d002a2c                DelayUs
 .text.FlashOperation
                0x000000009d002a54       0xa4 obj/main.o
                0x000000009d002a54                FlashOperation
 .text.WriteFlashSubBlock
                0x000000009d002af8       0x74 obj/main.o
                0x000000009d002af8                WriteFlashSubBlock
 .text.BootApplication
                0x000000009d002b6c      0x41c obj/main.o
                0x000000009d002b6c                BootApplication
 .text.startup.main
                0x000000009d002f88      0x134 obj/main.o
                0x000000009d002f88                main
 .text.memzero  0x000000009d0030bc       0x24 obj/main.o
                0x000000009d0030bc                memzero
 .text.USBCBInitEP
                0x000000009d0030e0       0x40 obj/main.o
                0x000000009d0030e0                USBCBInitEP
 .text.USER_USB_CALLBACK_EVENT_HANDLER
                0x000000009d003120       0x58 obj/main.o
                0x000000009d003120                USER_USB_CALLBACK_EVENT_HANDLER
 .text          0x000000009d003178       0x14 /tmp/ccJegnDK.o
 *(.text.*personality*)
 *(.gnu.warning)
 *(.mips16.fn.*)
 *(.mips16.call.*)
                0x000000009d00318c                _text_end = .
                0x000000009d00318c                _text_begin = .
 *(.text .stub .text.* .gnu.linkonce.t.*)
 *(.text.*personality*)
 *(.gnu.warning)
 *(.mips16.fn.*)
 *(.mips16.call.*)
                0x000000009d00318c                _text_end = .

.rodata         0x000000009d00318c      0x11c
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.USBDeviceTasks
                0x000000009d00318c       0x30 obj/usb_device.o
 .rodata.USB_SD_Ptr
                0x000000009d0031bc        0xc obj/usb_descriptors.o
                0x000000009d0031bc                USB_SD_Ptr
 .rodata.USB_CD_Ptr
                0x000000009d0031c8        0x4 obj/usb_descriptors.o
                0x000000009d0031c8                USB_CD_Ptr
 .rodata.hid_rpt01
                0x000000009d0031cc       0x20 obj/usb_descriptors.o
                0x000000009d0031cc                hid_rpt01
 .rodata.sd002  0x000000009d0031ec       0x28 obj/usb_descriptors.o
                0x000000009d0031ec                sd002
 .rodata.sd001  0x000000009d003214       0x34 obj/usb_descriptors.o
                0x000000009d003214                sd001
 .rodata.sd000  0x000000009d003248        0x4 obj/usb_descriptors.o
                0x000000009d003248                sd000
 .rodata.configDescriptor1
                0x000000009d00324c       0x2c obj/usb_descriptors.o
                0x000000009d00324c                configDescriptor1
 .rodata.device_dsc
                0x000000009d003278       0x14 obj/usb_descriptors.o
                0x000000009d003278                device_dsc
 .rodata.BootApplication
                0x000000009d00328c       0x1c obj/main.o
 *(.rodata1)
                0x000000009d0032a8                . = ALIGN (0x4)
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 *(.rodata1)
                0x000000009d0032a8                . = ALIGN (0x4)

.sdata2         0x000000009d0032a8        0x0
 *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
                0x000000009d0032a8                . = ALIGN (0x4)
 *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
                0x000000009d0032a8                . = ALIGN (0x4)

.sbss2          0x000000009d0032a8        0x0
 *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
                0x000000009d0032a8                . = ALIGN (0x4)
 *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
                0x000000009d0032a8                . = ALIGN (0x4)

.eh_frame_hdr
 *(.eh_frame_hdr)
 *(.eh_frame_hdr)

.eh_frame       0x000000009d0032a8        0x4
 *(.eh_frame)
 .eh_frame      0x000000009d0032a8        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .eh_frame      0x000000009d0032a8        0x4 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 *(.eh_frame)

.dbg_data       0x00000000a0000000        0x0
                0x00000000a0000000                . = (. + DEFINED (_DEBUGGER)?0x200:0x0)
                0x00000000a0000000                . = (. + DEFINED (_DEBUGGER)?0x200:0x0)

.data           0x00000000a0000000        0x0 load address 0x000000009d0032ac
                0x00000000a0000000                _data_begin = .
 *(.data .data.* .gnu.linkonce.d.*)
 *(.gnu.linkonce.d.*personality*)
 *(.data1)
                0x00000000a0000000                _data_begin = .
 *(.data .data.* .gnu.linkonce.d.*)
 *(.gnu.linkonce.d.*personality*)
 *(.data1)
                0x000000009d0032ac                _data_image_begin = LOADADDR (.data)

.eh_frame
 *(.eh_frame)
 *(.eh_frame)
                0x00000000a0007ff0                _gp = (ALIGN (0x10) + 0x7ff0)

.got
 *(.got.plt)
 *(.got)
 *(.got.plt)
 *(.got)

.sdata          0x00000000a0000000        0x0 load address 0x000000009d0032ac
                0x00000000a0000000                _sdata_begin = .
 *(.sdata .sdata.* .gnu.linkonce.s.*)
                0x00000000a0000000                _sdata_end = .
                0x00000000a0000000                _sdata_begin = .
 *(.sdata .sdata.* .gnu.linkonce.s.*)
                0x00000000a0000000                _sdata_end = .

.lit8
 *(.lit8)
 *(.lit8)

.lit4
 *(.lit4)
 *(.lit4)
                0x00000000a0000000                . = ALIGN (0x4)
                0x00000000a0000000                _data_end = .
                0x00000000a0000000                _bss_begin = .

.sbss           0x00000000a0000000        0x0 load address 0x000000009d0032ac
                0x00000000a0000000                _sbss_begin = .
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 *(.scommon)
                0x00000000a0000000                _sbss_end = .
                0x00000000a0000000                _sbss_begin = .
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 *(.scommon)
                0x00000000a0000000                _sbss_end = .

.bss            0x00000000a0000000      0x6cc load address 0x000000009d0032ac
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss.led_count.7183
                0x00000000a0000000        0x4 obj/main.o
 .bss.USBInHandle
                0x00000000a0000004        0x4 obj/main.o
                0x00000000a0000004                USBInHandle
 .bss.USBOutHandle
                0x00000000a0000008        0x4 obj/main.o
                0x00000000a0000008                USBOutHandle
 *(COMMON)
 COMMON         0x00000000a000000c        0x2 obj/usb_function_hid.o
                0x00000000a000000c                active_protocol
                0x00000000a000000d                idle_rate
 *fill*         0x00000000a000000e      0x1f2 
 COMMON         0x00000000a0000200      0x37c obj/usb_device.o
                0x00000000a0000200                pDst
                0x00000000a0000204                USBDeferINDataStagePackets
                0x00000000a0000400                BDT
                0x00000000a0000440                CtrlTrfData
                0x00000000a0000480                hid_report_out
                0x00000000a00004c0                USBDeferOUTDataStagePackets
                0x00000000a00004c4                USBDeviceState
                0x00000000a00004c8                controlTransferState
                0x00000000a00004c9                endpoint_number
                0x00000000a00004d0                inPipes
                0x00000000a00004e0                pBDTEntryIn
                0x00000000a00004e8                hid_report_in
                0x00000000a0000528                ep_data_out
                0x00000000a000052c                USBStatusStageEnabledFlag1
                0x00000000a0000530                USBStatusStageEnabledFlag2
                0x00000000a0000534                pBDTEntryOut
                0x00000000a000053c                BothEP0OutUOWNsSet
                0x00000000a0000540                pBDTEntryEP0OutNext
                0x00000000a0000544                USBBusIsSuspended
                0x00000000a0000548                USBStatusStageTimeoutCounter
                0x00000000a000054c                SetupPkt
                0x00000000a0000554                ep_data_in
                0x00000000a0000556                shortPacketStatus
                0x00000000a0000558                pBDTEntryEP0OutCurrent
                0x00000000a000055c                USBActiveConfiguration
                0x00000000a0000560                RemoteWakeup
                0x00000000a0000564                USTATcopy
                0x00000000a0000568                USBAlternateInterface
                0x00000000a000056c                outPipes
                0x00000000a0000578                USBDeferStatusStagePacket
 COMMON         0x00000000a000057c      0x14e obj/main.o
                0x00000000a000057c                ProgrammingBuffer
                0x00000000a00005fc                BootState
                0x00000000a0000600                PacketToPC
                0x00000000a0000640                PacketFromPC
                0x00000000a0000680                ConfigsProtected
                0x00000000a0000684                ProgrammedPointer
                0x00000000a0000688                PacketFromPCBuffer
                0x00000000a00006c8                BufferedDataIndex
                0x00000000a00006c9                ErasePageTracker
                0x00000000a00006cc                . = ALIGN (0x4)
 *fill*         0x00000000a00006ca        0x2 
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 *(COMMON)
                0x00000000a00006cc                . = ALIGN (0x4)
                0x00000000a00006cc                . = ALIGN (0x4)
                0x00000000a00006cc                _end = .
                0x00000000a00006cc                _bss_end = .

.heap           0x00000000a00006cc        0x0
                0x00000000a00006cc                _heap = .
                0x00000000a00006cc                . = (. + _min_heap_size)
                0x00000000a00006cc                _heap = .
                0x00000000a00006cc                . = (. + _min_heap_size)

.stack          0x00000000a00006cc      0x800
                0x00000000a00006cc                _splim = .
                0x00000000a00006cc                _SPLIM = .
                0x00000000a0000acc                . = (. + _min_stack_size)
 *fill*         0x00000000a00006cc      0x400 
                0x00000000a0000acc                _splim = .
                0x00000000a0000acc                _SPLIM = .
                0x00000000a0000ecc                . = (. + _min_stack_size)
 *fill*         0x00000000a0000acc      0x400 

.ramfunc        0x00000000a0001000        0x0 load address 0x000000009d0032ac
                0x00000000a0001000                _ramfunc_begin = .
 *(.ramfunc .ramfunc.*)
                0x00000000a0001000                . = ALIGN (0x4)
                0x00000000a0001000                _ramfunc_end = .
                0x00000000a0001000                _ramfunc_begin = .
 *(.ramfunc .ramfunc.*)
                0x00000000a0001000                . = ALIGN (0x4)
                0x00000000a0001000                _ramfunc_end = .
                0x000000009d0032ac                _ramfunc_image_begin = LOADADDR (.ramfunc)
                0x0000000000000000                _ramfunc_length = SIZEOF (.ramfunc)
                0x0000000000001000                _bmxdkpba_address = (_ramfunc_begin - ORIGIN (kseg1_data_mem))
                0x0000000000010000                _bmxdudba_address = 0x10000
                0x0000000000010000                _bmxdupba_address = 0x10000
                0x00000000a0010000                _stack = (_ramfunc_length > 0x0)?(_ramfunc_begin - 0x4):(ORIGIN (kseg1_data_mem) + 0x10000)
                0x0000000000000001                ASSERT (((_min_stack_size + _min_heap_size) <= (_stack - _heap)), Not enough space to allocate both stack and heap.  Reduce heap and/or stack size.)

.pdr            0x0000000000000000        0x0
 *(.pdr)
 .pdr           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .pdr           0x0000000000000000        0x0 obj/usb_descriptors.o
 .pdr           0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o
 *(.pdr)

.mdebug.abi32   0x0000000000000000        0x0
 .mdebug.abi32  0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .mdebug.abi32  0x0000000000000000        0x0 obj/usb_function_hid.o
 .mdebug.abi32  0x0000000000000000        0x0 obj/usb_device.o
 .mdebug.abi32  0x0000000000000000        0x0 obj/usb_descriptors.o
 .mdebug.abi32  0x0000000000000000        0x0 obj/main.o
 .mdebug.abi32  0x0000000000000000        0x0 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o

.comment        0x0000000000000000       0x11
 .comment       0x0000000000000000       0x11 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 obj/usb_function_hid.o
 .comment       0x0000000000000000       0x12 obj/usb_device.o
 .comment       0x0000000000000000       0x12 obj/usb_descriptors.o
 .comment       0x0000000000000000       0x12 obj/main.o
 .comment       0x0000000000000000       0x12 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o

.gnu.attributes
                0x0000000000000000       0x10
 .gnu.attributes
                0x0000000000000000       0x10 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtbegin.o
 .gnu.attributes
                0x0000000000000010       0x10 obj/usb_function_hid.o
 .gnu.attributes
                0x0000000000000020       0x10 obj/usb_device.o
 .gnu.attributes
                0x0000000000000030       0x10 obj/usb_descriptors.o
 .gnu.attributes
                0x0000000000000040       0x10 obj/main.o
 .gnu.attributes
                0x0000000000000050       0x10 /usr/bin/../lib/gcc/mips-elf/4.9.1/soft-float/el/crtend.o

.reginfo
 *(.reginfo)
 *(.reginfo)
                0x0000000000000400                PROVIDE (_min_stack_size, 0x400)
                0x0000000000000000                PROVIDE (_min_heap_size, 0x0)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_0) <= (_vector_spacing << 0x5))), function at exception vector 0 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_1) <= (_vector_spacing << 0x5))), function at exception vector 1 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_2) <= (_vector_spacing << 0x5))), function at exception vector 2 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_3) <= (_vector_spacing << 0x5))), function at exception vector 3 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_4) <= (_vector_spacing << 0x5))), function at exception vector 4 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_5) <= (_vector_spacing << 0x5))), function at exception vector 5 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_6) <= (_vector_spacing << 0x5))), function at exception vector 6 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_7) <= (_vector_spacing << 0x5))), function at exception vector 7 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_8) <= (_vector_spacing << 0x5))), function at exception vector 8 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_9) <= (_vector_spacing << 0x5))), function at exception vector 9 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_10) <= (_vector_spacing << 0x5))), function at exception vector 10 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_11) <= (_vector_spacing << 0x5))), function at exception vector 11 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_12) <= (_vector_spacing << 0x5))), function at exception vector 12 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_13) <= (_vector_spacing << 0x5))), function at exception vector 13 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_14) <= (_vector_spacing << 0x5))), function at exception vector 14 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_15) <= (_vector_spacing << 0x5))), function at exception vector 15 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_16) <= (_vector_spacing << 0x5))), function at exception vector 16 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_17) <= (_vector_spacing << 0x5))), function at exception vector 17 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_18) <= (_vector_spacing << 0x5))), function at exception vector 18 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_19) <= (_vector_spacing << 0x5))), function at exception vector 19 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_20) <= (_vector_spacing << 0x5))), function at exception vector 20 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_21) <= (_vector_spacing << 0x5))), function at exception vector 21 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_22) <= (_vector_spacing << 0x5))), function at exception vector 22 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_23) <= (_vector_spacing << 0x5))), function at exception vector 23 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_24) <= (_vector_spacing << 0x5))), function at exception vector 24 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_25) <= (_vector_spacing << 0x5))), function at exception vector 25 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_26) <= (_vector_spacing << 0x5))), function at exception vector 26 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_27) <= (_vector_spacing << 0x5))), function at exception vector 27 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_28) <= (_vector_spacing << 0x5))), function at exception vector 28 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_29) <= (_vector_spacing << 0x5))), function at exception vector 29 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_30) <= (_vector_spacing << 0x5))), function at exception vector 30 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_31) <= (_vector_spacing << 0x5))), function at exception vector 31 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_32) <= (_vector_spacing << 0x5))), function at exception vector 32 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_33) <= (_vector_spacing << 0x5))), function at exception vector 33 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_34) <= (_vector_spacing << 0x5))), function at exception vector 34 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_35) <= (_vector_spacing << 0x5))), function at exception vector 35 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_36) <= (_vector_spacing << 0x5))), function at exception vector 36 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_37) <= (_vector_spacing << 0x5))), function at exception vector 37 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_38) <= (_vector_spacing << 0x5))), function at exception vector 38 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_39) <= (_vector_spacing << 0x5))), function at exception vector 39 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_40) <= (_vector_spacing << 0x5))), function at exception vector 40 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_41) <= (_vector_spacing << 0x5))), function at exception vector 41 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_42) <= (_vector_spacing << 0x5))), function at exception vector 42 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_43) <= (_vector_spacing << 0x5))), function at exception vector 43 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_44) <= (_vector_spacing << 0x5))), function at exception vector 44 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_45) <= (_vector_spacing << 0x5))), function at exception vector 45 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_46) <= (_vector_spacing << 0x5))), function at exception vector 46 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_47) <= (_vector_spacing << 0x5))), function at exception vector 47 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_48) <= (_vector_spacing << 0x5))), function at exception vector 48 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_49) <= (_vector_spacing << 0x5))), function at exception vector 49 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_50) <= (_vector_spacing << 0x5))), function at exception vector 50 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_51) <= (_vector_spacing << 0x5))), function at exception vector 51 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_52) <= (_vector_spacing << 0x5))), function at exception vector 52 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_53) <= (_vector_spacing << 0x5))), function at exception vector 53 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_54) <= (_vector_spacing << 0x5))), function at exception vector 54 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_55) <= (_vector_spacing << 0x5))), function at exception vector 55 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_56) <= (_vector_spacing << 0x5))), function at exception vector 56 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_57) <= (_vector_spacing << 0x5))), function at exception vector 57 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_58) <= (_vector_spacing << 0x5))), function at exception vector 58 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_59) <= (_vector_spacing << 0x5))), function at exception vector 59 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_60) <= (_vector_spacing << 0x5))), function at exception vector 60 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_61) <= (_vector_spacing << 0x5))), function at exception vector 61 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_62) <= (_vector_spacing << 0x5))), function at exception vector 62 too large)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_63) <= (_vector_spacing << 0x5))), function at exception vector 63 too large)
                0x000000009d0032ac                _data_image_begin = LOADADDR (.data)
                0x0000000000008050                _gp = (ALIGN (0x10) + 0x7ff0)
                0x0000000000000060                . = ALIGN (0x4)
                0x0000000000000060                _data_end = .
                0x0000000000000060                _bss_begin = .
                0x0000000000000060                . = ALIGN (0x4)
                0x0000000000000060                _end = .
                0x0000000000000060                _bss_end = .
                0x000000009d0032ac                _ramfunc_image_begin = LOADADDR (.ramfunc)
                0x0000000000000000                _ramfunc_length = SIZEOF (.ramfunc)
                0x0000000000001000                _bmxdkpba_address = (_ramfunc_begin - ORIGIN (kseg1_data_mem))
                0x0000000000010000                _bmxdudba_address = 0x10000
                0x0000000000010000                _bmxdupba_address = 0x10000
                0x00000000a0010000                _stack = (_ramfunc_length > 0x0)?(_ramfunc_begin - 0x4):(ORIGIN (kseg1_data_mem) + 0x10000)
                0x0000000000000001                ASSERT (((_min_stack_size + _min_heap_size) <= (_stack - _heap)), Not enough space to allocate both stack and heap.  Reduce heap and/or stack size.)
OUTPUT(hex/Bootloader_v0.1_32MX270F256B_X8MHz.elf elf32-littlemips)
