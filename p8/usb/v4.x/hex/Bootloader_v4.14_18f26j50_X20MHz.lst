gplink-1.2.0 #996 (Oct 11 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 12-17-2013  16:05:28
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.1 #8894 (Oct 11 2013) (Linux)
                                           ; This file was generated Tue Dec 17 16:05:28 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f26j50
                                           	radix	dec
00fffa   1d       db      0x1d             	CONFIG	OSC=HSPLL
00fff8   a6       db      0xa6             	CONFIG	PLLDIV=5
00fff9   f7       db      0xf7             	CONFIG	CPUDIV=OSC1
                                           	CONFIG	WDTEN=OFF
                                           	CONFIG	STVREN=ON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CP0=OFF
                                           	CONFIG	IESO=OFF
                                           	CONFIG	FCMEN=OFF
                                           	CONFIG	LPT1OSC=OFF
                                           	CONFIG	T1DIG=ON
00fffb   f8       db      0xf8             	CONFIG	WDTPS=256
00fffc   61       db      0x61             	CONFIG	DSWDTPS=8192
                                           	CONFIG	DSWDTEN=OFF
                                           	CONFIG	DSBOREN=OFF
                                           	CONFIG	RTCOSC=INTOSCREF
                                           	CONFIG	DSWDTOSC=INTOSCREF
00fffd   f8       db      0xf8             	CONFIG	MSSP7B_EN=MSK7
                                           	CONFIG	IOL1WAY=OFF
00fffe   81       db      0x81             	CONFIG	WPCFG=OFF
                                           	CONFIG	WPEND=PAGE_0
                                           	CONFIG	WPFP=PAGE_1
00ffff   f1       db      0xf1             	CONFIG	WPDIS=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_disable_boot
                                           	global	_main
                                           	global	_usb_ep_data_out_callback
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PPSCONbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_UIEbits
                                           	extern	_UEIEbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_PADCFG1bits
                                           	extern	_REFOCONbits
                                           	extern	_RTCCALbits
                                           	extern	_RTCCFGbits
                                           	extern	_ODCON3bits
                                           	extern	_ODCON2bits
                                           	extern	_ODCON1bits
                                           	extern	_ANCON0bits
                                           	extern	_ANCON1bits
                                           	extern	_DSWAKELbits
                                           	extern	_DSWAKEHbits
                                           	extern	_DSCONLbits
                                           	extern	_DSCONHbits
                                           	extern	_TCLKCONbits
                                           	extern	_CVRCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UEIRbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_CMSTATbits
                                           	extern	_CMSTATUSbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_SSP2ADDbits
                                           	extern	_T4CONbits
                                           	extern	_T3CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_HLVDCONbits
                                           	extern	_DMACON2bits
                                           	extern	_DMACON1bits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_ALRMRPTbits
                                           	extern	_ALRMCFGbits
                                           	extern	_TRISAbits
                                           	extern	_TRISBbits
                                           	extern	_TRISCbits
                                           	extern	_T3GCONbits
                                           	extern	_T1GCONbits
                                           	extern	_OSCTUNEbits
                                           	extern	_RCSTA2bits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_TXSTA2bits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCONHbits
                                           	extern	_CCP2CONbits
                                           	extern	_ECCP2CONbits
                                           	extern	_ECCP2DELbits
                                           	extern	_PWM2CONbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ECCP1DELbits
                                           	extern	_PWM1CONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PSTR1CONbits
                                           	extern	_WDTCONbits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1ADDbits
                                           	extern	_SSPADDbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON1bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SetupPacket
                                           	extern	_controlTransferBuffer
                                           	extern	_bootCmd
                                           	extern	_outPtr
                                           	extern	_inPtr
                                           	extern	_wCount
                                           	extern	_deviceState
                                           	extern	_selfPowered
                                           	extern	_currentConfiguration
                                           	extern	_ep_bdt
                                           	extern	_RPOR0
                                           	extern	_RPOR1
                                           	extern	_RPOR2
                                           	extern	_RPOR3
                                           	extern	_RPOR4
                                           	extern	_RPOR5
                                           	extern	_RPOR6
                                           	extern	_RPOR7
                                           	extern	_RPOR8
                                           	extern	_RPOR9
                                           	extern	_RPOR10
                                           	extern	_RPOR11
                                           	extern	_RPOR12
                                           	extern	_RPOR13
                                           	extern	_RPOR17
                                           	extern	_RPOR18
                                           	extern	_RPINR1
                                           	extern	_RPINR2
                                           	extern	_RPINR3
                                           	extern	_RPINR4
                                           	extern	_RPINR6
                                           	extern	_RPINR7
                                           	extern	_RPINR8
                                           	extern	_RPINR12
                                           	extern	_RPINR13
                                           	extern	_RPINR16
                                           	extern	_RPINR17
                                           	extern	_RPINR21
                                           	extern	_RPINR22
                                           	extern	_RPINR23
                                           	extern	_RPINR24
                                           	extern	_PPSCON
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_UIE
                                           	extern	_UEIE
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_PADCFG1
                                           	extern	_REFOCON
                                           	extern	_RTCCAL
                                           	extern	_RTCCFG
                                           	extern	_ODCON3
                                           	extern	_ODCON2
                                           	extern	_ODCON1
                                           	extern	_ANCON0
                                           	extern	_ANCON1
                                           	extern	_DSWAKEL
                                           	extern	_DSWAKEH
                                           	extern	_DSCONL
                                           	extern	_DSCONH
                                           	extern	_DSGPR0
                                           	extern	_DSGPR1
                                           	extern	_TCLKCON
                                           	extern	_CVRCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UEIR
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_DMABCH
                                           	extern	_DMABCL
                                           	extern	_RXADDRH
                                           	extern	_RXADDRL
                                           	extern	_TXADDRH
                                           	extern	_TXADDRL
                                           	extern	_CMSTAT
                                           	extern	_CMSTATUS
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_BAUDCON2
                                           	extern	_SPBRGH2
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_HLVDCON
                                           	extern	_DMACON2
                                           	extern	_DMACON1
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_ALRMVALL
                                           	extern	_ALRMVALH
                                           	extern	_ALRMRPT
                                           	extern	_ALRMCFG
                                           	extern	_TRISA
                                           	extern	_TRISB
                                           	extern	_TRISC
                                           	extern	_T3GCON
                                           	extern	_RTCVALL
                                           	extern	_RTCVALH
                                           	extern	_T1GCON
                                           	extern	_OSCTUNE
                                           	extern	_RCSTA2
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_TXSTA2
                                           	extern	_TXREG2
                                           	extern	_RCREG2
                                           	extern	_SPBRG2
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_CTMUICON
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCONH
                                           	extern	_CCP2CON
                                           	extern	_ECCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_ECCP2DEL
                                           	extern	_PWM2CON
                                           	extern	_ECCP2AS
                                           	extern	_PSTR2CON
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ECCP1DEL
                                           	extern	_PWM1CON
                                           	extern	_ECCP1AS
                                           	extern	_PSTR1CON
                                           	extern	_WDTCON
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_CM2CON
                                           	extern	_CM2CON1
                                           	extern	_CM1CON
                                           	extern	_CM1CON1
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_EnableUSBModule
                                           	extern	_ProcessUSBTransactions
                                           	extern	_device_descriptor
                                           	extern	_configuration_descriptor
                                           	extern	_string_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	137; src/main.c	OSCTUNEbits.PLLEN = 1;      // Enable the PLL
00083a   8c9b     bsf     0x9b, 0x6, 0     	BSF	_OSCTUNEbits, 6
                                           ;	.line	139; src/main.c	while (pll_counter--);      // Wait > 2ms until the PLL locks.
00083c   0e58     movlw   0x58             	MOVLW	0x58
00083e   6e00     movwf   0, 0             	MOVWF	r0x00
000840   0e02     movlw   0x2              	MOVLW	0x02
000842   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00113_DS_:
000844   c000     movff   0, 0x2           	MOVFF	r0x00, r0x02
000846   f002
000848   c001     movff   0x1, 0x3         	MOVFF	r0x01, r0x03
00084a   f003
00084c   0eff     movlw   0xff             	MOVLW	0xff
00084e   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000850   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000852   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000854   1003     iorwf   0x3, 0, 0        	IORWF	r0x03, W
000856   e1f6     bnz     0x844            	BNZ	_00113_DS_
                                           ;	.line	142; src/main.c	ANCON0 = 0xFF;              // AN0 to AN7  are Digital I/O
000858   0eff     movlw   0xff             	MOVLW	0xff
00085a   010f     movlb   0xf              	BANKSEL	_ANCON0
00085c   6f48     movwf   0x48, 0x1        	MOVWF	_ANCON0, B
                                           ;	.line	143; src/main.c	ANCON1 = 0x1F;              // AN8 to AN12 are Digital I/O
00085e   0e1f     movlw   0x1f             	MOVLW	0x1f
000860   010f     movlb   0xf              	BANKSEL	_ANCON1
000862   6f49     movwf   0x49, 0x1        	MOVWF	_ANCON1, B
                                           ;	.line	186; src/main.c	if (RCONbits.NOT_POR == 0)
000864   b2d0     btfsc   0xd0, 0x1, 0     	BTFSC	_RCONbits, 1
000866   d004     bra     0x870            	BRA	_00117_DS_
                                           ;	.line	188; src/main.c	RCON |= 0b10010011;     // reset all reset flag
000868   0e93     movlw   0x93             	MOVLW	0x93
00086a   12d0     iorwf   0xd0, 0x1, 0     	IORWF	_RCON, F
00086c   ef00     goto    0xc00            	goto 0x0C00
00086e   f006
                                           	
                                           _00117_DS_:
                                           ;	.line	197; src/main.c	if (RCONbits.IPEN == 0)
000870   bed0     btfsc   0xd0, 0x7, 0     	BTFSC	_RCONbits, 7
000872   d045     bra     0x8fe            	BRA	_00130_DS_
                                           ;	.line	203; src/main.c	RCONbits.IPEN   = 1;        // enables priority levels on
000874   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	223; src/main.c	TMR1L = 0;                  // clear Timer 1 counter because
000876   6ace     clrf    0xce, 0          	CLRF	_TMR1L
                                           ;	.line	224; src/main.c	TMR1H = 0;                  // counter get an unknown value at reset
000878   6acf     clrf    0xcf, 0          	CLRF	_TMR1H
                                           ;	.line	225; src/main.c	T1CON = 0b00110001;         // clock source is Fosc/4 (0b00)
00087a   0e31     movlw   0x31             	MOVLW	0x31
00087c   6ecd     movwf   0xcd, 0          	MOVWF	_T1CON
00087e   9494     bcf     0x94, 0x2, 0     	bcf _TRISC, 2 ; led output
000880   848b     bsf     0x8b, 0x2, 0     	bsf _LATC, 2 ; led on
                                           	
                                           ;	.line	254; src/main.c	UCFG = 0b00010100;          // (0x14) full speed mode
000882   0e14     movlw   0x14             	MOVLW	0x14
000884   010f     movlb   0xf              	BANKSEL	_UCFG
000886   6f39     movwf   0x39, 0x1        	MOVWF	_UCFG, B
                                           ;	.line	259; src/main.c	EP_IN_BD(1).ADDR = (unsigned long)&bootCmd;
000888   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
00088a   6e00     movwf   0, 0             	MOVWF	r0x00
00088c   0e05     movlw   0x5              	MOVLW	HIGH(_bootCmd)
00088e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000890   6a02     clrf    0x2, 0           	CLRF	r0x02
000892   6a03     clrf    0x3, 0           	CLRF	r0x03
000894   5000     movf    0, 0, 0          	MOVF	r0x00, W
000896   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 14)
000898   6f0e     movwf   0xe, 0x1         	MOVWF	(_ep_bdt + 14), B
00089a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00089c   6f0f     movwf   0xf, 0x1         	MOVWF	(_ep_bdt + 15), B
00089e   0105     movlb   0x5              	BANKSEL	_currentConfiguration
                                           ;	.line	260; src/main.c	currentConfiguration = 0x00;
0008a0   6bcc     clrf    0xcc, 0x1        	CLRF	_currentConfiguration, B
0008a2   0105     movlb   0x5              	BANKSEL	_deviceState
                                           ;	.line	261; src/main.c	deviceState = DETACHED;
0008a4   6bcb     clrf    0xcb, 0x1        	CLRF	_deviceState, B
                                           ;	.line	266; src/main.c	do
0008a6   6a00     clrf    0, 0             	CLRF	r0x00
0008a8   6a01     clrf    0x1, 0           	CLRF	r0x01
0008aa   6a02     clrf    0x2, 0           	CLRF	r0x02
0008ac   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00120_DS_:
                                           ;	.line	268; src/main.c	EnableUSBModule();
0008ae   ecce     call    0x99c, 0         	CALL	_EnableUSBModule
0008b0   f004
                                           ;	.line	269; src/main.c	ProcessUSBTransactions();
0008b2   ec0e     call    0x1c, 0          	CALL	_ProcessUSBTransactions
0008b4   f000
                                           ;	.line	271; src/main.c	if (usb_counter == 0xFFFFF)
0008b6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008b8   0aff     xorlw   0xff             	XORLW	0xff
0008ba   e108     bnz     0x8cc            	BNZ	_00159_DS_
0008bc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0008be   0aff     xorlw   0xff             	XORLW	0xff
0008c0   e105     bnz     0x8cc            	BNZ	_00159_DS_
0008c2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0008c4   0a0f     xorlw   0xf              	XORLW	0x0f
0008c6   e102     bnz     0x8cc            	BNZ	_00159_DS_
0008c8   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0008ca   e001     bz      0x8ce            	BZ	_00160_DS_
                                           _00159_DS_:
0008cc   d002     bra     0x8d2            	BRA	_00119_DS_
                                           _00160_DS_:
                                           ;	.line	273; src/main.c	disable_boot();     // disable boot and jump to user app.
0008ce   eca9     call    0x952, 0         	CALL	_disable_boot
0008d0   f004
                                           _00119_DS_:
                                           ;	.line	275; src/main.c	usb_counter++;
0008d2   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0008d4   e304     bnc     0x8de            	BNC	_00161_DS_
0008d6   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0008d8   e302     bnc     0x8de            	BNC	_00161_DS_
0008da   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
0008dc   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
                                           _00161_DS_:
0008de   0105     movlb   0x5              	BANKSEL	_deviceState
                                           ;	.line	277; src/main.c	while (deviceState != CONFIGURED);
0008e0   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
0008e2   0a05     xorlw   0x5              	XORLW	0x05
0008e4   e1e4     bnz     0x8ae            	BNZ	_00120_DS_
                                           _00126_DS_:
                                           ;	.line	284; src/main.c	ProcessUSBTransactions();
0008e6   ec0e     call    0x1c, 0          	CALL	_ProcessUSBTransactions
0008e8   f000
                                           ;	.line	287; src/main.c	if (PIR1bits.TMR1IF == 1)
0008ea   6a00     clrf    0, 0             	CLRF	r0x00
0008ec   b09e     btfsc   0x9e, 0, 0       	BTFSC	_PIR1bits, 0
0008ee   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0008f0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0008f2   0a01     xorlw   0x1              	XORLW	0x01
0008f4   e1f8     bnz     0x8e6            	BNZ	_00126_DS_
                                           ;	.line	290; src/main.c	PIR1bits.TMR1IF = 0;
0008f6   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
0008f8   0e04     movlw   0x4              	movlw 1 << 2 ; toggle
0008fa   1a8b     xorwf   0x8b, 0x1, 0     	xorwf _LATC, f ; the led
                                           	
0008fc   d7f4     bra     0x8e6            	BRA	_00126_DS_
                                           _00130_DS_:
0008fe   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__usb_ep_data_out_callback	code
                                           _usb_ep_data_out_callback:
                                           ;	.line	309; src/main.c	void usb_ep_data_out_callback(char end_point)
0004d4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0004d6   ffe5
0004d8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0004da   ffd9
0004dc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0004de   ffe5
0004e0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0004e2   ffe5
0004e4   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0004e6   ffe5
0004e8   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0004ea   ffe5
0004ec   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0004ee   ffe5
0004f0   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0004f2   ffe5
0004f4   0e02     movlw   0x2              	MOVLW	0x02
0004f6   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0004f8   f000
0004fa   848b     bsf     0x8b, 0x2, 0     	bsf _LATC, 2 ; led on
                                           	
                                           ;	.line	324; src/main.c	EP_IN_BD(end_point).Cnt = 0;
0004fc   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
0004fe   0bfe     andlw   0xfe             	ANDLW	0xfe
000500   6e01     movwf   0x1, 0           	MOVWF	r0x01
000502   2801     incf    0x1, 0, 0        	INCF	r0x01, W
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; #	MOVF	r0x00, W
000504   6e00     movwf   0, 0             	MOVWF	r0x00
000506   0d04     mullw   0x4              	MULLW	0x04
000508   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
00050a   be00     btfsc   0, 0x7, 0        	BTFSC	r0x00, 7
00050c   0804     sublw   0x4              	SUBLW	0x04
00050e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000510   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
000512   f000
000514   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000516   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000518   6e03     movwf   0x3, 0           	MOVWF	r0x03
00051a   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00051c   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00051e   6e04     movwf   0x4, 0           	MOVWF	r0x04
000520   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000522   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000524   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000526   ffe9
000528   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
00052a   ffea
00052c   0e00     movlw   0                	MOVLW	0x00
00052e   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	327; src/main.c	TBLPTRU = bootCmd.addru;
000530   c584     movff   0x584, 0xff8     	MOVFF	(_bootCmd + 4), _TBLPTRU
000532   fff8
                                           ;	.line	328; src/main.c	TBLPTRH = bootCmd.addrh;
000534   c583     movff   0x583, 0xff7     	MOVFF	(_bootCmd + 3), _TBLPTRH
000536   fff7
                                           ;	.line	329; src/main.c	TBLPTRL = bootCmd.addrl;
000538   c582     movff   0x582, 0xff6     	MOVFF	(_bootCmd + 2), _TBLPTRL
00053a   fff6
00053c   0105     movlb   0x5              	BANKSEL	_bootCmd
                                           ;	.line	332; src/main.c	if (bootCmd.cmd ==  RESET)
00053e   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000540   0aff     xorlw   0xff             	XORLW	0xff
000542   e103     bnz     0x54a            	BNZ	_00185_DS_
                                           ;	.line	335; src/main.c	disable_boot();
000544   eca9     call    0x952, 0         	CALL	_disable_boot
000546   f004
000548   d0a8     bra     0x69a            	BRA	_00186_DS_
                                           _00185_DS_:
00054a   0105     movlb   0x5              	BANKSEL	_bootCmd
                                           ;	.line	339; src/main.c	else if (bootCmd.cmd == READ_VERSION)
00054c   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
00054e   e113     bnz     0x576            	BNZ	_00182_DS_
                                           ;	.line	342; src/main.c	bootCmd.buffer[2] = MINOR_VERSION;
000550   0e0e     movlw   0xe              	MOVLW	0x0e
                                           ; removed redundant BANKSEL
000552   6f82     movwf   0x82, 0x1        	MOVWF	(_bootCmd + 2), B
                                           ;	.line	343; src/main.c	bootCmd.buffer[3] = MAJOR_VERSION;
000554   0e04     movlw   0x4              	MOVLW	0x04
                                           ; removed redundant BANKSEL
000556   6f83     movwf   0x83, 0x1        	MOVWF	(_bootCmd + 3), B
                                           ;	.line	346; src/main.c	EP_IN_BD(end_point).Cnt = 4;
000558   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00055a   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00055c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00055e   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000560   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000562   6e04     movwf   0x4, 0           	MOVWF	r0x04
000564   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000566   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000568   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00056a   ffe9
00056c   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
00056e   ffea
000570   0e04     movlw   0x4              	MOVLW	0x04
000572   6eef     movwf   0xef, 0          	MOVWF	INDF0
000574   d092     bra     0x69a            	BRA	_00186_DS_
                                           _00182_DS_:
000576   0105     movlb   0x5              	BANKSEL	_bootCmd
                                           ;	.line	350; src/main.c	else if (bootCmd.cmd == READ_FLASH)
000578   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
00057a   0a01     xorlw   0x1              	XORLW	0x01
00057c   e127     bnz     0x5cc            	BNZ	_00179_DS_
                                           ;	.line	353; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
00057e   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00193_DS_:
000580   0105     movlb   0x5              	BANKSEL	(_bootCmd + 1)
000582   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
000584   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
000586   e20f     bc      0x5a6            	BC	_00170_DS_
000588   0009     tblrd   *+               	tblrd*+
                                           ;	.line	357; src/main.c	bootCmd.xdat[counter] = TABLAT;
00058a   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
00058c   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
00058e   6e04     movwf   0x4, 0           	MOVWF	r0x04
000590   6a05     clrf    0x5, 0           	CLRF	r0x05
000592   0e05     movlw   0x5              	MOVLW	HIGH(_bootCmd + 5)
000594   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000596   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000598   ffe9
00059a   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
00059c   ffea
00059e   cff5     movff   0xff5, 0xfef     	MOVFF	_TABLAT, INDF0
0005a0   ffef
                                           ;	.line	353; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
0005a2   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0005a4   d7ed     bra     0x580            	BRA	_00193_DS_
                                           _00170_DS_:
                                           ;	.line	361; src/main.c	EP_IN_BD(end_point).Cnt = 5 + bootCmd.len;
0005a6   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0005a8   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0005aa   6e03     movwf   0x3, 0           	MOVWF	r0x03
0005ac   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0005ae   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0005b0   6e04     movwf   0x4, 0           	MOVWF	r0x04
0005b2   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0005b4   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0005b6   0e05     movlw   0x5              	MOVLW	0x05
0005b8   0105     movlb   0x5              	BANKSEL	(_bootCmd + 1)
0005ba   2581     addwf   0x81, 0, 0x1     	ADDWF	(_bootCmd + 1), W, B
0005bc   6e05     movwf   0x5, 0           	MOVWF	r0x05
0005be   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0005c0   ffe9
0005c2   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
0005c4   ffea
0005c6   c005     movff   0x5, 0xfef       	MOVFF	r0x05, INDF0
0005c8   ffef
0005ca   d067     bra     0x69a            	BRA	_00186_DS_
                                           _00179_DS_:
0005cc   0105     movlb   0x5              	BANKSEL	_bootCmd
                                           ;	.line	365; src/main.c	else if (bootCmd.cmd == WRITE_FLASH)
0005ce   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
0005d0   0a02     xorlw   0x2              	XORLW	0x02
0005d2   e001     bz      0x5d6            	BZ	_00251_DS_
0005d4   d03c     bra     0x64e            	BRA	_00176_DS_
                                           _00251_DS_:
                                           ;	.line	382; src/main.c	EECON1 = 0b10100100;
0005d6   0ea4     movlw   0xa4             	MOVLW	0xa4
0005d8   6ea6     movwf   0xa6, 0          	MOVWF	_EECON1
                                           ;	.line	437; src/main.c	for (counter=0; counter < bootCmd.len; counter+=2)
0005da   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00196_DS_:
0005dc   0105     movlb   0x5              	BANKSEL	(_bootCmd + 1)
0005de   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
0005e0   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0005e2   e226     bc      0x630            	BC	_00171_DS_
                                           ;	.line	439; src/main.c	TBLPTRL =  bootCmd.addrl + counter; // address of the byte to write
0005e4   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0005e6   2582     addwf   0x82, 0, 0x1     	ADDWF	(_bootCmd + 2), W, B
0005e8   6ef6     movwf   0xf6, 0          	MOVWF	_TBLPTRL
                                           ;	.line	441; src/main.c	TABLAT = bootCmd.xdat[counter];     // load value in the holding registers
0005ea   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
0005ec   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0005ee   6e04     movwf   0x4, 0           	MOVWF	r0x04
0005f0   6a05     clrf    0x5, 0           	CLRF	r0x05
0005f2   0e05     movlw   0x5              	MOVLW	HIGH(_bootCmd + 5)
0005f4   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
0005f6   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0005f8   ffe9
0005fa   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0005fc   ffea
0005fe   cfef     movff   0xfef, 0xff5     	MOVFF	INDF0, _TABLAT
000600   fff5
000602   000d     tblwt   *+               	tblwt*+
                                           ;	.line	445; src/main.c	TABLAT = bootCmd.xdat[counter+1];   // load value in the holding registers
000604   2803     incf    0x3, 0, 0        	INCF	r0x03, W
000606   6e04     movwf   0x4, 0           	MOVWF	r0x04
000608   6a05     clrf    0x5, 0           	CLRF	r0x05
00060a   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
00060c   2604     addwf   0x4, 0x1, 0      	ADDWF	r0x04, F
00060e   0e05     movlw   0x5              	MOVLW	HIGH(_bootCmd + 5)
000610   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000612   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000614   ffe9
000616   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000618   ffea
00061a   cfef     movff   0xfef, 0xff5     	MOVFF	INDF0, _TABLAT
00061c   fff5
00061e   000c     tblwt   *                	tblwt*
                                           ;	.line	452; src/main.c	EECON2 = 0x55;      // unlock sequence
000620   0e55     movlw   0x55             	MOVLW	0x55
000622   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
                                           ;	.line	453; src/main.c	EECON2 = 0xAA;      // unlock sequence
000624   0eaa     movlw   0xaa             	MOVLW	0xaa
000626   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
                                           ;	.line	454; src/main.c	EECON1bits.WR = 1;  // start 2-byte write operation
000628   82a6     bsf     0xa6, 0x1, 0     	BSF	_EECON1bits, 1
                                           ;	.line	437; src/main.c	for (counter=0; counter < bootCmd.len; counter+=2)
00062a   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00062c   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00062e   d7d6     bra     0x5dc            	BRA	_00196_DS_
                                           _00171_DS_:
                                           ;	.line	460; src/main.c	EP_IN_BD(end_point).Cnt = 1;
000630   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000632   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000634   6e03     movwf   0x3, 0           	MOVWF	r0x03
000636   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000638   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00063a   6e04     movwf   0x4, 0           	MOVWF	r0x04
00063c   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
00063e   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000640   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000642   ffe9
000644   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000646   ffea
000648   0e01     movlw   0x1              	MOVLW	0x01
00064a   6eef     movwf   0xef, 0          	MOVWF	INDF0
00064c   d026     bra     0x69a            	BRA	_00186_DS_
                                           _00176_DS_:
00064e   0105     movlb   0x5              	BANKSEL	_bootCmd
                                           ;	.line	464; src/main.c	else if (bootCmd.cmd == ERASE_FLASH)
000650   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000652   0a03     xorlw   0x3              	XORLW	0x03
000654   e122     bnz     0x69a            	BNZ	_00186_DS_
                                           ;	.line	482; src/main.c	EECON1 = 0b10100100;
000656   0ea4     movlw   0xa4             	MOVLW	0xa4
000658   6ea6     movwf   0xa6, 0          	MOVWF	_EECON1
                                           ;	.line	485; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
00065a   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00199_DS_:
00065c   0105     movlb   0x5              	BANKSEL	(_bootCmd + 1)
00065e   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
000660   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
000662   e20d     bc      0x67e            	BC	_00172_DS_
                                           ;	.line	493; src/main.c	EECON1bits.FREE = 1;// perform erase operation
000664   88a6     bsf     0xa6, 0x4, 0     	BSF	_EECON1bits, 4
                                           ;	.line	494; src/main.c	EECON2 = 0x55;      // unlock sequence
000666   0e55     movlw   0x55             	MOVLW	0x55
000668   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
                                           ;	.line	495; src/main.c	EECON2 = 0xAA;      // unlock sequence
00066a   0eaa     movlw   0xaa             	MOVLW	0xaa
00066c   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
                                           ;	.line	496; src/main.c	EECON1bits.WR = 1;  // start write or erase operation
00066e   82a6     bsf     0xa6, 0x1, 0     	BSF	_EECON1bits, 1
                                           ;	.line	497; src/main.c	EECON1bits.FREE = 0;// back to write operation
000670   98a6     bcf     0xa6, 0x4, 0     	BCF	_EECON1bits, 4
000672   0e04     movlw   0x4              	movlw 0x04 ; 0x04 -> W
000674   26f7     addwf   0xf7, 0x1, 0     	addwf _TBLPTRH, 1 ; (W) + (TBLPTRH) -> TBLPTRH
                                           	; (C) is affected
000676   0e00     movlw   0                	movlw 0x00 ; 0x00 -> W
000678   22f8     addwfc  0xf8, 0x1, 0     	addwfc _TBLPTRU, 1 ; (W) + (TBLPTRU) + (C) -> TBLPTRU
                                           	; Add W and Carry Bit to F
                                           	
                                           ;	.line	485; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
00067a   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00067c   d7ef     bra     0x65c            	BRA	_00199_DS_
                                           _00172_DS_:
                                           ;	.line	554; src/main.c	EP_IN_BD(end_point).Cnt = 1;
00067e   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000680   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000682   6e03     movwf   0x3, 0           	MOVWF	r0x03
000684   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000686   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000688   6e04     movwf   0x4, 0           	MOVWF	r0x04
00068a   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
00068c   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
00068e   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000690   ffe9
000692   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000694   ffea
000696   0e01     movlw   0x1              	MOVLW	0x01
000698   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00186_DS_:
                                           ;	.line	560; src/main.c	if (EP_IN_BD(end_point).Cnt > 0)
00069a   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00069c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00069e   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0006a0   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0006a2   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
0006a4   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0006a6   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0006a8   ffe9
0006aa   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0006ac   ffea
0006ae   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
0006b0   f000
0006b2   5000     movf    0, 0, 0          	MOVF	r0x00, W
0006b4   e009     bz      0x6c8            	BZ	_00191_DS_
0006b6   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	563; src/main.c	if (EP_IN_BD(1).Stat.DTS)
0006b8   ad0c     btfss   0xc, 0x6, 0x1    	BTFSS	(_ep_bdt + 12), 6, B
0006ba   d003     bra     0x6c2            	BRA	_00188_DS_
                                           ;	.line	564; src/main.c	EP_IN_BD(1).Stat.uc = 0b10001000; // UOWN 1 DTS 0 DTSEN 1
0006bc   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
0006be   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
0006c0   d003     bra     0x6c8            	BRA	_00191_DS_
                                           _00188_DS_:
                                           ;	.line	566; src/main.c	EP_IN_BD(1).Stat.uc = 0b11001000; // UOWN 1 DTS 1 DTSEN 1
0006c2   0ec8     movlw   0xc8             	MOVLW	0xc8
0006c4   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
0006c6   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; ;multiply lit val:0x04 by variable r0x01 and store in r0x01
                                           _00191_DS_:
                                           ;	.line	570; src/main.c	EP_OUT_BD(end_point).Cnt = EP1_BUFFER_SIZE;
0006c8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0006ca   0d04     mullw   0x4              	MULLW	0x04
0006cc   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
0006ce   be01     btfsc   0x1, 0x7, 0      	BTFSC	r0x01, 7
0006d0   0804     sublw   0x4              	SUBLW	0x04
0006d2   6e00     movwf   0, 0             	MOVWF	r0x00
0006d4   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
0006d6   f001
0006d8   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0006da   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0006dc   6e02     movwf   0x2, 0           	MOVWF	r0x02
0006de   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0006e0   2000     addwfc  0, 0, 0          	ADDWFC	r0x00, W
0006e2   6e03     movwf   0x3, 0           	MOVWF	r0x03
0006e4   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
0006e6   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0006e8   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0006ea   ffe9
0006ec   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0006ee   ffea
0006f0   0e40     movlw   0x40             	MOVLW	0x40
0006f2   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	573; src/main.c	EP_OUT_BD(end_point).Stat.uc = 0x80;      // UOWN set to 1
0006f4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0006f6   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
0006f8   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0006fa   2200     addwfc  0, 0x1, 0        	ADDWFC	r0x00, F
0006fc   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0006fe   ffe9
000700   c000     movff   0, 0xfea         	MOVFF	r0x00, FSR0H
000702   ffea
000704   0e80     movlw   0x80             	MOVLW	0x80
000706   6eef     movwf   0xef, 0          	MOVWF	INDF0
000708   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00070a   f005
00070c   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00070e   f004
000710   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000712   f003
000714   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000716   f002
000718   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00071a   f001
00071c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00071e   f000
000720   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000722   ffd9
000724   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__disable_boot	code
                                           _disable_boot:
                                           ;	.line	32; src/main.c	void disable_boot(void) //__naked
000952   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000954   ffe5
000956   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000958   ffe5
00095a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00095c   ffe5
00095e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000960   ffe5
                                           ;	.line	36; src/main.c	T1CON = 0;                  // disable timer 1
000962   6acd     clrf    0xcd, 0          	CLRF	_T1CON
                                           ;	.line	45; src/main.c	UCONbits.SUSPND = 0;
000964   9265     bcf     0x65, 0x1, 0     	BCF	_UCONbits, 1
                                           ;	.line	46; src/main.c	UCONbits.USBEN  = 0;
000966   9665     bcf     0x65, 0x3, 0     	BCF	_UCONbits, 3
                                           ;	.line	48; src/main.c	while (counter--);          // force timeout on USB
000968   0eff     movlw   0xff             	MOVLW	0xff
00096a   6e00     movwf   0, 0             	MOVWF	r0x00
00096c   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00105_DS_:
00096e   c000     movff   0, 0x2           	MOVFF	r0x00, r0x02
000970   f002
000972   c001     movff   0x1, 0x3         	MOVFF	r0x01, r0x03
000974   f003
000976   0eff     movlw   0xff             	MOVLW	0xff
000978   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00097a   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00097c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00097e   1003     iorwf   0x3, 0, 0        	IORWF	r0x03, W
000980   e1f6     bnz     0x96e            	BNZ	_00105_DS_
                                           ;	.line	51; src/main.c	RCONbits.NOT_POR = 0;       // set Power-on Reset
000982   92d0     bcf     0xd0, 0x1, 0     	BCF	_RCONbits, 1
000984   8494     bsf     0x94, 0x2, 0     	bsf _TRISC, 2 ; led input
000986   948b     bcf     0x8b, 0x2, 0     	bcf _LATC, 2 ; led off
                                           	
000988   00ff     reset                    	reset 
00098a   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00098c   f003
00098e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000990   f002
000992   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000994   f001
000996   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000998   f000
00099a   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  880 (0x0370) bytes ( 0.67%)
                                           ;           	  440 (0x01b8) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.1 #8894 (Oct 11 2013) (Linux)
                                           ; This file was generated Tue Dec 17 16:05:28 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f26j50
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_deviceAddress
                                           	global	_selfPowered
                                           	global	_EnableUSBModule
                                           	global	_ProcessUSBTransactions
                                           	global	_deviceState
                                           	global	_currentConfiguration
                                           	global	_ctrlTransferStage
                                           	global	_requestHandled
                                           	global	_outPtr
                                           	global	_inPtr
                                           	global	_wCount
                                           	global	_ep_bdt
                                           	global	_SetupPacket
                                           	global	_controlTransferBuffer
                                           	global	_bootCmd
                                           	global	_InDataStage
                                           	global	_WaitForSetupStage
                                           	global	_device_descriptor
                                           	global	_configuration_descriptor
                                           	global	_lang
                                           	global	_manu
                                           	global	_prod
                                           	global	_string_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	__gptrput1
                                           	extern	_PPSCONbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_UIEbits
                                           	extern	_UEIEbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_PADCFG1bits
                                           	extern	_REFOCONbits
                                           	extern	_RTCCALbits
                                           	extern	_RTCCFGbits
                                           	extern	_ODCON3bits
                                           	extern	_ODCON2bits
                                           	extern	_ODCON1bits
                                           	extern	_ANCON0bits
                                           	extern	_ANCON1bits
                                           	extern	_DSWAKELbits
                                           	extern	_DSWAKEHbits
                                           	extern	_DSCONLbits
                                           	extern	_DSCONHbits
                                           	extern	_TCLKCONbits
                                           	extern	_CVRCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UEIRbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_CMSTATbits
                                           	extern	_CMSTATUSbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_SSP2ADDbits
                                           	extern	_T4CONbits
                                           	extern	_T3CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_HLVDCONbits
                                           	extern	_DMACON2bits
                                           	extern	_DMACON1bits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_ALRMRPTbits
                                           	extern	_ALRMCFGbits
                                           	extern	_TRISAbits
                                           	extern	_TRISBbits
                                           	extern	_TRISCbits
                                           	extern	_T3GCONbits
                                           	extern	_T1GCONbits
                                           	extern	_OSCTUNEbits
                                           	extern	_RCSTA2bits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_TXSTA2bits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCONHbits
                                           	extern	_CCP2CONbits
                                           	extern	_ECCP2CONbits
                                           	extern	_ECCP2DELbits
                                           	extern	_PWM2CONbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ECCP1DELbits
                                           	extern	_PWM1CONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PSTR1CONbits
                                           	extern	_WDTCONbits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1ADDbits
                                           	extern	_SSPADDbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON1bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_RPOR0
                                           	extern	_RPOR1
                                           	extern	_RPOR2
                                           	extern	_RPOR3
                                           	extern	_RPOR4
                                           	extern	_RPOR5
                                           	extern	_RPOR6
                                           	extern	_RPOR7
                                           	extern	_RPOR8
                                           	extern	_RPOR9
                                           	extern	_RPOR10
                                           	extern	_RPOR11
                                           	extern	_RPOR12
                                           	extern	_RPOR13
                                           	extern	_RPOR17
                                           	extern	_RPOR18
                                           	extern	_RPINR1
                                           	extern	_RPINR2
                                           	extern	_RPINR3
                                           	extern	_RPINR4
                                           	extern	_RPINR6
                                           	extern	_RPINR7
                                           	extern	_RPINR8
                                           	extern	_RPINR12
                                           	extern	_RPINR13
                                           	extern	_RPINR16
                                           	extern	_RPINR17
                                           	extern	_RPINR21
                                           	extern	_RPINR22
                                           	extern	_RPINR23
                                           	extern	_RPINR24
                                           	extern	_PPSCON
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_UIE
                                           	extern	_UEIE
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_PADCFG1
                                           	extern	_REFOCON
                                           	extern	_RTCCAL
                                           	extern	_RTCCFG
                                           	extern	_ODCON3
                                           	extern	_ODCON2
                                           	extern	_ODCON1
                                           	extern	_ANCON0
                                           	extern	_ANCON1
                                           	extern	_DSWAKEL
                                           	extern	_DSWAKEH
                                           	extern	_DSCONL
                                           	extern	_DSCONH
                                           	extern	_DSGPR0
                                           	extern	_DSGPR1
                                           	extern	_TCLKCON
                                           	extern	_CVRCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UEIR
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_DMABCH
                                           	extern	_DMABCL
                                           	extern	_RXADDRH
                                           	extern	_RXADDRL
                                           	extern	_TXADDRH
                                           	extern	_TXADDRL
                                           	extern	_CMSTAT
                                           	extern	_CMSTATUS
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_BAUDCON2
                                           	extern	_SPBRGH2
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_HLVDCON
                                           	extern	_DMACON2
                                           	extern	_DMACON1
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_ALRMVALL
                                           	extern	_ALRMVALH
                                           	extern	_ALRMRPT
                                           	extern	_ALRMCFG
                                           	extern	_TRISA
                                           	extern	_TRISB
                                           	extern	_TRISC
                                           	extern	_T3GCON
                                           	extern	_RTCVALL
                                           	extern	_RTCVALH
                                           	extern	_T1GCON
                                           	extern	_OSCTUNE
                                           	extern	_RCSTA2
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_TXSTA2
                                           	extern	_TXREG2
                                           	extern	_RCREG2
                                           	extern	_SPBRG2
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_CTMUICON
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCONH
                                           	extern	_CCP2CON
                                           	extern	_ECCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_ECCP2DEL
                                           	extern	_PWM2CON
                                           	extern	_ECCP2AS
                                           	extern	_PSTR2CON
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ECCP1DEL
                                           	extern	_PWM1CON
                                           	extern	_ECCP1AS
                                           	extern	_PSTR1CON
                                           	extern	_WDTCON
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_CM2CON
                                           	extern	_CM2CON1
                                           	extern	_CM1CON
                                           	extern	_CM1CON1
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_usb_ep_data_out_callback
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           
                                           usbram5	udata
                                           _controlTransferBuffer	res	64
                                           _SetupPacket	res	64
                                           
                                           udata_picUSB_0	udata
                                           _selfPowered	res	1
                                           
                                           udata_picUSB_1	udata
                                           _deviceAddress	res	1
                                           
                                           udata_picUSB_2	udata
                                           _wCount	res	2
                                           
                                           udata_picUSB_3	udata
                                           _inPtr	res	3
                                           
                                           udata_picUSB_4	udata
                                           _outPtr	res	3
                                           
                                           udata_picUSB_5	udata
                                           _ctrlTransferStage	res	1
                                           
                                           udata_picUSB_6	udata
                                           _deviceState	res	1
                                           
                                           udata_picUSB_7	udata
                                           _currentConfiguration	res	1
                                           
                                           udata_picUSB_8	udata
                                           _requestHandled	res	1
                                           
                                           udata_picUSB_9	udata
                                           _bootCmd	res	64
                                           
                                           
                                           ustat_picUSB_00	udata	0X0400
                                           _ep_bdt        	res	16
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessUSBTransactions	code
                                           _ProcessUSBTransactions:
                                           ;	.line	255; src/picUSB.c	void ProcessUSBTransactions()
00001c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00001e   ffe5
000020   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000022   ffe5
000024   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000026   ffe5
000028   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00002a   ffe5
00002c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00002e   ffe5
000030   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000032   ffe5
000034   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000036   ffe5
000038   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00003a   ffe5
00003c   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00003e   ffe5
000040   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000042   ffe5
000044   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000046   ffe5
                                           ; #	MOVF	_deviceState, W, B
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00164_DS_
                                           ; #	GOTO	_00267_DS_
                                           ; #	BTFSS	_UIRbits, 2
000048   0105     movlb   0x5              	BANKSEL	_deviceState
                                           ;	.line	258; src/picUSB.c	if(deviceState == DETACHED)
00004a   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
                                           ;	.line	259; src/picUSB.c	return;
00004c   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
                                           ;	.line	263; src/picUSB.c	if(UIRbits.ACTVIF && UIEbits.ACTVIE)
00004e   ef53     goto    0x4a6            	GOTO	_00267_DS_
000050   f002
000052   a462     btfss   0x62, 0x2, 0     	BTFSS	_UIRbits, 2
000054   d006     bra     0x62             	BRA	_00166_DS_
000056   010f     movlb   0xf              	BANKSEL	_UIEbits
000058   a536     btfss   0x36, 0x2, 0x1   	BTFSS	_UIEbits, 2, B
00005a   d003     bra     0x62             	BRA	_00166_DS_
                                           ;	.line	265; src/picUSB.c	UCONbits.SUSPND = 0;
00005c   9265     bcf     0x65, 0x1, 0     	BCF	_UCONbits, 1
                                           ; removed redundant BANKSEL
                                           ;	.line	266; src/picUSB.c	UIEbits.ACTVIE = 0;
00005e   9536     bcf     0x36, 0x2, 0x1   	BCF	_UIEbits, 2, B
                                           ;	.line	267; src/picUSB.c	UIRbits.ACTVIF = 0;
000060   9462     bcf     0x62, 0x2, 0     	BCF	_UIRbits, 2
                                           _00166_DS_:
                                           ;	.line	271; src/picUSB.c	if(UCONbits.SUSPND == 1)
000062   6a00     clrf    0, 0             	CLRF	r0x00
000064   b265     btfsc   0x65, 0x1, 0     	BTFSC	_UCONbits, 1
000066   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000068   5000     movf    0, 0, 0          	MOVF	r0x00, W
00006a   0a01     xorlw   0x1              	XORLW	0x01
00006c   e102     bnz     0x72             	BNZ	_00169_DS_
                                           ;	.line	272; src/picUSB.c	return;
00006e   ef53     goto    0x4a6            	GOTO	_00267_DS_
000070   f002
                                           _00169_DS_:
                                           ;	.line	275; src/picUSB.c	if (UIRbits.URSTIF && UIEbits.URSTIE)
000072   a062     btfss   0x62, 0, 0       	BTFSS	_UIRbits, 0
000074   d022     bra     0xba             	BRA	_00174_DS_
000076   010f     movlb   0xf              	BANKSEL	_UIEbits
000078   a136     btfss   0x36, 0, 0x1     	BTFSS	_UIEbits, 0, B
00007a   d01f     bra     0xba             	BRA	_00174_DS_
                                           ;	.line	277; src/picUSB.c	UEIR  = 0x00;
00007c   6a63     clrf    0x63, 0          	CLRF	_UEIR
                                           ;	.line	278; src/picUSB.c	UIR   = 0x00;
00007e   6a62     clrf    0x62, 0          	CLRF	_UIR
                                           ;	.line	280; src/picUSB.c	UEIE  = 0x9f; // 0b10011111
000080   0e9f     movlw   0x9f             	MOVLW	0x9f
000082   010f     movlb   0xf              	BANKSEL	_UEIE
000084   6f37     movwf   0x37, 0x1        	MOVWF	_UEIE, B
                                           ;	.line	282; src/picUSB.c	UIE   = 0x7F; //0x7b; // 0b01111011
000086   0e7f     movlw   0x7f             	MOVLW	0x7f
000088   010f     movlb   0xf              	BANKSEL	_UIE
00008a   6f36     movwf   0x36, 0x1        	MOVWF	_UIE, B
00008c   010f     movlb   0xf              	BANKSEL	_UADDR
                                           ;	.line	283; src/picUSB.c	UADDR = 0x00;
00008e   6b38     clrf    0x38, 0x1        	CLRF	_UADDR, B
                                           ;	.line	286; src/picUSB.c	UEP0 = EP_CTRL | HSHK_EN;
000090   0e16     movlw   0x16             	MOVLW	0x16
000092   010f     movlb   0xf              	BANKSEL	_UEP0
000094   6f26     movwf   0x26, 0x1        	MOVWF	_UEP0, B
                                           _00170_DS_:
                                           ;	.line	289; src/picUSB.c	while (UIRbits.TRNIF == 1)
000096   6a00     clrf    0, 0             	CLRF	r0x00
000098   b662     btfsc   0x62, 0x3, 0     	BTFSC	_UIRbits, 3
00009a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00009c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00009e   0a01     xorlw   0x1              	XORLW	0x01
0000a0   e102     bnz     0xa6             	BNZ	_00172_DS_
                                           ;	.line	290; src/picUSB.c	UIRbits.TRNIF = 0;
0000a2   9662     bcf     0x62, 0x3, 0     	BCF	_UIRbits, 3
0000a4   d7f8     bra     0x96             	BRA	_00170_DS_
                                           _00172_DS_:
                                           ;	.line	293; src/picUSB.c	UCONbits.PKTDIS = 0;
0000a6   9865     bcf     0x65, 0x4, 0     	BCF	_UCONbits, 4
                                           ;	.line	296; src/picUSB.c	WaitForSetupStage();
0000a8   ecf8     call    0x9f0, 0         	CALL	_WaitForSetupStage
0000aa   f004
0000ac   0105     movlb   0x5              	BANKSEL	_selfPowered
                                           ;	.line	299; src/picUSB.c	selfPowered = 0;                      // Self powered is off by default
0000ae   6bc8     clrf    0xc8, 0x1        	CLRF	_selfPowered, B
0000b0   0105     movlb   0x5              	BANKSEL	_currentConfiguration
                                           ;	.line	300; src/picUSB.c	currentConfiguration = 0;             // Clear active configuration
0000b2   6bcc     clrf    0xcc, 0x1        	CLRF	_currentConfiguration, B
                                           ;	.line	301; src/picUSB.c	deviceState = DEFAULT;
0000b4   0e03     movlw   0x3              	MOVLW	0x03
0000b6   0105     movlb   0x5              	BANKSEL	_deviceState
0000b8   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00174_DS_:
                                           ;	.line	305; src/picUSB.c	if (UIRbits.IDLEIF && UIEbits.IDLEIE)
0000ba   a862     btfss   0x62, 0x4, 0     	BTFSS	_UIRbits, 4
0000bc   d00a     bra     0xd2             	BRA	_00177_DS_
0000be   010f     movlb   0xf              	BANKSEL	_UIEbits
0000c0   a936     btfss   0x36, 0x4, 0x1   	BTFSS	_UIEbits, 4, B
0000c2   d007     bra     0xd2             	BRA	_00177_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	307; src/picUSB.c	UIEbits.ACTVIE = 1;
0000c4   8536     bsf     0x36, 0x2, 0x1   	BSF	_UIEbits, 2, B
                                           ;	.line	308; src/picUSB.c	UIRbits.IDLEIF = 0;
0000c6   9862     bcf     0x62, 0x4, 0     	BCF	_UIRbits, 4
                                           ;	.line	309; src/picUSB.c	UCONbits.SUSPND = 1;
0000c8   8265     bsf     0x65, 0x1, 0     	BSF	_UCONbits, 1
                                           ;	.line	320; src/picUSB.c	PIR2bits.USBIF = 0;
0000ca   98a1     bcf     0xa1, 0x4, 0     	BCF	_PIR2bits, 4
                                           ;	.line	321; src/picUSB.c	INTCONbits.RBIF = 0;
0000cc   90f2     bcf     0xf2, 0, 0       	BCF	_INTCONbits, 0
                                           ;	.line	322; src/picUSB.c	PIE2bits.USBIE = 1;
0000ce   88a0     bsf     0xa0, 0x4, 0     	BSF	_PIE2bits, 4
                                           ;	.line	323; src/picUSB.c	INTCONbits.RBIE = 1;
0000d0   86f2     bsf     0xf2, 0x3, 0     	BSF	_INTCONbits, 3
                                           _00177_DS_:
                                           ;	.line	331; src/picUSB.c	if (UIRbits.SOFIF && UIEbits.SOFIE)
0000d2   ac62     btfss   0x62, 0x6, 0     	BTFSS	_UIRbits, 6
                                           ; #	GOTO	_00180_DS_
                                           ; #	BTFSS	_UIEbits, 6, B
                                           ; #	GOTO	_00180_DS_
                                           ; #	BCF	_UIRbits, 6
                                           ; #	BTFSS	_UIRbits, 5
                                           ;	.line	333; src/picUSB.c	UIRbits.SOFIF = 0;
0000d4   d003     bra     0xdc             	BRA	_00180_DS_
0000d6   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	337; src/picUSB.c	if (UIRbits.STALLIF && UIEbits.STALLIE)
0000d8   bd36     btfsc   0x36, 0x6, 0x1   	BTFSC	_UIEbits, 6, B
0000da   9c62     bcf     0x62, 0x6, 0     	BCF	_UIRbits, 6
                                           _00180_DS_:
0000dc   aa62     btfss   0x62, 0x5, 0     	BTFSS	_UIRbits, 5
0000de   d00f     bra     0xfe             	BRA	_00185_DS_
0000e0   010f     movlb   0xf              	BANKSEL	_UIEbits
0000e2   ab36     btfss   0x36, 0x5, 0x1   	BTFSS	_UIEbits, 5, B
0000e4   d00c     bra     0xfe             	BRA	_00185_DS_
                                           ;	.line	339; src/picUSB.c	if(UEP0bits.EPSTALL == 1)
0000e6   6a00     clrf    0, 0             	CLRF	r0x00
0000e8   010f     movlb   0xf              	BANKSEL	_UEP0bits
0000ea   b126     btfsc   0x26, 0, 0x1     	BTFSC	_UEP0bits, 0, B
0000ec   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0000ee   5000     movf    0, 0, 0          	MOVF	r0x00, W
0000f0   0a01     xorlw   0x1              	XORLW	0x01
0000f2   e104     bnz     0xfc             	BNZ	_00183_DS_
                                           ;	.line	342; src/picUSB.c	WaitForSetupStage();
0000f4   ecf8     call    0x9f0, 0         	CALL	_WaitForSetupStage
0000f6   f004
0000f8   010f     movlb   0xf              	BANKSEL	_UEP0bits
                                           ;	.line	343; src/picUSB.c	UEP0bits.EPSTALL = 0;
0000fa   9126     bcf     0x26, 0, 0x1     	BCF	_UEP0bits, 0, B
                                           _00183_DS_:
                                           ;	.line	345; src/picUSB.c	UIRbits.STALLIF = 0;
0000fc   9a62     bcf     0x62, 0x5, 0     	BCF	_UIRbits, 5
                                           _00185_DS_:
                                           ;	.line	349; src/picUSB.c	if (UIRbits.UERRIF && UIEbits.UERRIE)
0000fe   a262     btfss   0x62, 0x1, 0     	BTFSS	_UIRbits, 1
                                           ; #	GOTO	_00188_DS_
                                           ; #	BTFSS	_UIEbits, 1, B
                                           ; #	GOTO	_00188_DS_
                                           ; #	BCF	_UIRbits, 1
                                           ; #	MOVLW	0x03
                                           ;	.line	350; src/picUSB.c	UIRbits.UERRIF = 0;// Clear errors
000100   d003     bra     0x108            	BRA	_00188_DS_
000102   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	353; src/picUSB.c	if (deviceState < DEFAULT)  // DETACHED, ATTACHED or POWERED
000104   b336     btfsc   0x36, 0x1, 0x1   	BTFSC	_UIEbits, 1, B
000106   9262     bcf     0x62, 0x1, 0     	BCF	_UIRbits, 1
                                           _00188_DS_:
000108   0e03     movlw   0x3              	MOVLW	0x03
                                           ; #	SUBWF	_deviceState, W, B
                                           ; #	BTFSC	STATUS, 0
                                           ; #	GOTO	_00191_DS_
                                           ; #	GOTO	_00267_DS_
                                           ; #	BTFSS	_UIRbits, 3
00010a   0105     movlb   0x5              	BANKSEL	_deviceState
                                           ;	.line	354; src/picUSB.c	return;
00010c   5dcb     subwf   0xcb, 0, 0x1     	SUBWF	_deviceState, W, B
                                           ;	.line	365; src/picUSB.c	if(UIRbits.TRNIF && UIEbits.TRNIE)
00010e   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000110   ef53     goto    0x4a6            	GOTO	_00267_DS_
000112   f002
000114   a662     btfss   0x62, 0x3, 0     	BTFSS	_UIRbits, 3
000116   ef53     goto    0x4a6            	GOTO	_00267_DS_
000118   f002
00011a   010f     movlb   0xf              	BANKSEL	_UIEbits
00011c   a736     btfss   0x36, 0x3, 0x1   	BTFSS	_UIEbits, 3, B
00011e   ef53     goto    0x4a6            	GOTO	_00267_DS_
000120   f002
                                           ;	.line	370; src/picUSB.c	byte end_point = USTAT >> 3;
000122   3864     swapf   0x64, 0, 0       	SWAPF	_USTAT, W
000124   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
000126   0b1f     andlw   0x1f             	ANDLW	0x1f
000128   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	373; src/picUSB.c	if (end_point == 0) // Endpoint 0
00012a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00012c   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
00012e   d1b3     bra     0x496            	BRA	_00259_DS_
                                           ;	.line	376; src/picUSB.c	if (USTATbits.DIR == OUT)
000130   b464     btfsc   0x64, 0x2, 0     	BTFSC	_USTATbits, 2
000132   d18f     bra     0x452            	BRA	_00254_DS_
                                           ;	.line	380; src/picUSB.c	PID = (EP_OUT_BD(0).Stat.uc & 0x3C) >> 2;
000134   0e3c     movlw   0x3c             	MOVLW	0x3c
000136   0104     movlb   0x4              	BANKSEL	_ep_bdt
000138   1500     andwf   0, 0, 0x1        	ANDWF	_ep_bdt, W, B
00013a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00013c   4001     rrncf   0x1, 0, 0        	RRNCF	r0x01, W
00013e   40e8     rrncf   0xe8, 0, 0       	RRNCF	WREG, W
000140   0b3f     andlw   0x3f             	ANDLW	0x3f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
                                           ;	.line	390; src/picUSB.c	if (PID == 0x0D)
000142   0a0d     xorlw   0xd              	XORLW	0x0d
000144   e001     bz      0x148            	BZ	_00423_DS_
000146   d128     bra     0x398            	BRA	_00240_DS_
                                           _00423_DS_:
000148   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	394; src/picUSB.c	EP_IN_BD(0).Stat.uc &= ~BDS_UOWN;
00014a   5104     movf    0x4, 0, 0x1      	MOVF	(_ep_bdt + 4), W, B
00014c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00014e   9e01     bcf     0x1, 0x7, 0      	BCF	r0x01, 7
000150   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000152   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ; removed redundant BANKSEL
                                           ;	.line	395; src/picUSB.c	EP_OUT_BD(0).Stat.uc &= ~BDS_UOWN;
000154   5100     movf    0, 0, 0x1        	MOVF	_ep_bdt, W, B
000156   6e01     movwf   0x1, 0           	MOVWF	r0x01
000158   9e01     bcf     0x1, 0x7, 0      	BCF	r0x01, 7
00015a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00015c   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
00015e   0105     movlb   0x5              	BANKSEL	_ctrlTransferStage
                                           ;	.line	398; src/picUSB.c	ctrlTransferStage = SETUP_STAGE;
000160   6bca     clrf    0xca, 0x1        	CLRF	_ctrlTransferStage, B
000162   0105     movlb   0x5              	BANKSEL	_requestHandled
                                           ;	.line	399; src/picUSB.c	requestHandled = 0;                   // Default is that request hasn't been handled
000164   6bcd     clrf    0xcd, 0x1        	CLRF	_requestHandled, B
000166   0105     movlb   0x5              	BANKSEL	_wCount
                                           ;	.line	400; src/picUSB.c	wCount = 0;                           // No bytes transferred
000168   6bc6     clrf    0xc6, 0x1        	CLRF	_wCount, B
                                           ; removed redundant BANKSEL
00016a   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
00016c   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	410; src/picUSB.c	if((SetupPacket.bmRequestType & 0x60) != 0x00)
00016e   5140     movf    0x40, 0, 0x1     	MOVF	_SetupPacket, W, B
                                           ; #	ANDLW	0x60
                                           ; #	BTFSC	STATUS, 2
                                           ; #	GOTO	_00193_DS_
                                           ; #	GOTO	_00267_DS_
                                           ; #	MOVF	(_SetupPacket + 1), W, B
                                           ;	.line	411; src/picUSB.c	return;
000170   0b60     andlw   0x60             	ANDLW	0x60
                                           ;	.line	413; src/picUSB.c	if (SetupPacket.bRequest == SET_ADDRESS)
000172   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
000174   d198     bra     0x4a6            	BRA	_00267_DS_
                                           ; removed redundant BANKSEL
000176   5141     movf    0x41, 0, 0x1     	MOVF	(_SetupPacket + 1), W, B
000178   0a05     xorlw   0x5              	XORLW	0x05
00017a   e109     bnz     0x18e            	BNZ	_00222_DS_
                                           ;	.line	419; src/picUSB.c	requestHandled = 1;
00017c   0e01     movlw   0x1              	MOVLW	0x01
00017e   0105     movlb   0x5              	BANKSEL	_requestHandled
000180   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	420; src/picUSB.c	deviceState = ADDRESS;
000182   0e04     movlw   0x4              	MOVLW	0x04
000184   0105     movlb   0x5              	BANKSEL	_deviceState
000186   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           ;	.line	421; src/picUSB.c	deviceAddress = SetupPacket.wValue0;
000188   c542     movff   0x542, 0x5c9     	MOVFF	(_SetupPacket + 2), _deviceAddress
00018a   f5c9
00018c   d0c0     bra     0x30e            	BRA	_00223_DS_
                                           _00222_DS_:
00018e   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	424; src/picUSB.c	else if (SetupPacket.bRequest == GET_DESCRIPTOR)
000190   5141     movf    0x41, 0, 0x1     	MOVF	(_SetupPacket + 1), W, B
000192   0a06     xorlw   0x6              	XORLW	0x06
000194   e001     bz      0x198            	BZ	_00430_DS_
000196   d06b     bra     0x26e            	BRA	_00219_DS_
                                           _00430_DS_:
000198   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	426; src/picUSB.c	if(SetupPacket.bmRequestType == 0x80)
00019a   5140     movf    0x40, 0, 0x1     	MOVF	_SetupPacket, W, B
00019c   0a80     xorlw   0x80             	XORLW	0x80
00019e   e001     bz      0x1a2            	BZ	_00432_DS_
0001a0   d0b6     bra     0x30e            	BRA	_00223_DS_
                                           _00432_DS_:
0001a2   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	431; src/picUSB.c	if (SetupPacket.wValue1 == DEVICE_DESCRIPTOR)
0001a4   5143     movf    0x43, 0, 0x1     	MOVF	(_SetupPacket + 3), W, B
0001a6   0a01     xorlw   0x1              	XORLW	0x01
0001a8   e10f     bnz     0x1c8            	BNZ	_00200_DS_
                                           ;	.line	433; src/picUSB.c	requestHandled = 1;
0001aa   0e01     movlw   0x1              	MOVLW	0x01
0001ac   0105     movlb   0x5              	BANKSEL	_requestHandled
0001ae   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	434; src/picUSB.c	outPtr = (byte *)&device_descriptor;
0001b0   0e00     movlw   0                	MOVLW	UPPER(_device_descriptor)
0001b2   0105     movlb   0x5              	BANKSEL	(_outPtr + 2)
0001b4   6fc5     movwf   0xc5, 0x1        	MOVWF	(_outPtr + 2), B
0001b6   0e09     movlw   0x9              	MOVLW	HIGH(_device_descriptor)
                                           ; removed redundant BANKSEL
0001b8   6fc4     movwf   0xc4, 0x1        	MOVWF	(_outPtr + 1), B
0001ba   0e00     movlw   0                	MOVLW	LOW(_device_descriptor)
                                           ; removed redundant BANKSEL
0001bc   6fc3     movwf   0xc3, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	435; src/picUSB.c	wCount = sizeof(USB_Device_Descriptor);
0001be   0e12     movlw   0x12             	MOVLW	0x12
0001c0   0105     movlb   0x5              	BANKSEL	_wCount
0001c2   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0001c4   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
0001c6   d0a3     bra     0x30e            	BRA	_00223_DS_
                                           _00200_DS_:
0001c8   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	438; src/picUSB.c	else if (SetupPacket.wValue1 == CONFIGURATION_DESCRIPTOR)
0001ca   5143     movf    0x43, 0, 0x1     	MOVF	(_SetupPacket + 3), W, B
0001cc   0a02     xorlw   0x2              	XORLW	0x02
0001ce   e117     bnz     0x1fe            	BNZ	_00197_DS_
                                           ;	.line	440; src/picUSB.c	requestHandled = 1;
0001d0   0e01     movlw   0x1              	MOVLW	0x01
0001d2   0105     movlb   0x5              	BANKSEL	_requestHandled
0001d4   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	441; src/picUSB.c	outPtr = (byte *)&configuration_descriptor;
0001d6   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor)
0001d8   0105     movlb   0x5              	BANKSEL	(_outPtr + 2)
0001da   6fc5     movwf   0xc5, 0x1        	MOVWF	(_outPtr + 2), B
0001dc   0e09     movlw   0x9              	MOVLW	HIGH(_configuration_descriptor)
                                           ; removed redundant BANKSEL
0001de   6fc4     movwf   0xc4, 0x1        	MOVWF	(_outPtr + 1), B
0001e0   0e12     movlw   0x12             	MOVLW	LOW(_configuration_descriptor)
                                           ; removed redundant BANKSEL
0001e2   6fc3     movwf   0xc3, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	442; src/picUSB.c	wCount = configuration_descriptor.Header.wTotalLength;
0001e4   0e14     movlw   0x14             	MOVLW	LOW(_configuration_descriptor + 2)
0001e6   6ef6     movwf   0xf6, 0          	MOVWF	TBLPTRL
0001e8   0e09     movlw   0x9              	MOVLW	HIGH(_configuration_descriptor + 2)
0001ea   6ef7     movwf   0xf7, 0          	MOVWF	TBLPTRH
0001ec   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor + 2)
0001ee   6ef8     movwf   0xf8, 0          	MOVWF	TBLPTRU
0001f0   0009     tblrd   *+               	TBLRD*+	
0001f2   cff5     movff   0xff5, 0x5c6     	MOVFF	TABLAT, _wCount
0001f4   f5c6
0001f6   0009     tblrd   *+               	TBLRD*+	
0001f8   cff5     movff   0xff5, 0x5c7     	MOVFF	TABLAT, (_wCount + 1)
0001fa   f5c7
0001fc   d088     bra     0x30e            	BRA	_00223_DS_
                                           _00197_DS_:
0001fe   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	445; src/picUSB.c	else if (SetupPacket.wValue1 == STRING_DESCRIPTOR)
000200   5143     movf    0x43, 0, 0x1     	MOVF	(_SetupPacket + 3), W, B
000202   0a03     xorlw   0x3              	XORLW	0x03
000204   e001     bz      0x208            	BZ	_00438_DS_
000206   d083     bra     0x30e            	BRA	_00223_DS_
                                           _00438_DS_:
                                           ;	.line	447; src/picUSB.c	requestHandled = 1;
000208   0e01     movlw   0x1              	MOVLW	0x01
00020a   0105     movlb   0x5              	BANKSEL	_requestHandled
00020c   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
                                           ; ;multiply lit val:0x03 by variable (_SetupPacket + 2) and store in r0x01
00020e   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 2)
                                           ;	.line	449; src/picUSB.c	outPtr = string_descriptor[SetupPacket.wValue0];
000210   5142     movf    0x42, 0, 0x1     	MOVF	(_SetupPacket + 2), W, B
000212   0d03     mullw   0x3              	MULLW	0x03
000214   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
000216   6e02     movwf   0x2, 0           	MOVWF	r0x02
000218   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
00021a   f001
00021c   6a03     clrf    0x3, 0           	CLRF	r0x03
00021e   0e48     movlw   0x48             	MOVLW	LOW(_string_descriptor)
000220   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000222   0e09     movlw   0x9              	MOVLW	HIGH(_string_descriptor)
000224   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000226   0e00     movlw   0                	MOVLW	UPPER(_string_descriptor)
000228   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00022a   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
00022c   fff6
00022e   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
000230   fff7
000232   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
000234   fff8
000236   0009     tblrd   *+               	TBLRD*+	
000238   cff5     movff   0xff5, 0x5c3     	MOVFF	TABLAT, _outPtr
00023a   f5c3
00023c   0009     tblrd   *+               	TBLRD*+	
00023e   cff5     movff   0xff5, 0x5c4     	MOVFF	TABLAT, (_outPtr + 1)
000240   f5c4
000242   0009     tblrd   *+               	TBLRD*+	
000244   cff5     movff   0xff5, 0x5c5     	MOVFF	TABLAT, (_outPtr + 2)
000246   f5c5
                                           ;	.line	450; src/picUSB.c	wCount = *outPtr;
000248   c5c3     movff   0x5c3, 0x1       	MOVFF	_outPtr, r0x01
00024a   f001
00024c   c5c4     movff   0x5c4, 0x2       	MOVFF	(_outPtr + 1), r0x02
00024e   f002
000250   c5c5     movff   0x5c5, 0x3       	MOVFF	(_outPtr + 2), r0x03
000252   f003
000254   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000256   ffe9
000258   c002     movff   0x2, 0xff3       	MOVFF	r0x02, PRODL
00025a   fff3
00025c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00025e   ece7     call    0x9ce, 0         	CALL	__gptrget1
000260   f004
000262   6e01     movwf   0x1, 0           	MOVWF	r0x01
000264   c001     movff   0x1, 0x5c6       	MOVFF	r0x01, _wCount
000266   f5c6
000268   0105     movlb   0x5              	BANKSEL	(_wCount + 1)
00026a   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
00026c   d050     bra     0x30e            	BRA	_00223_DS_
                                           _00219_DS_:
00026e   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	466; src/picUSB.c	else if (SetupPacket.bRequest == SET_CONFIGURATION)
000270   5141     movf    0x41, 0, 0x1     	MOVF	(_SetupPacket + 1), W, B
000272   0a09     xorlw   0x9              	XORLW	0x09
000274   e11d     bnz     0x2b0            	BNZ	_00216_DS_
                                           ;	.line	468; src/picUSB.c	requestHandled = 1;
000276   0e01     movlw   0x1              	MOVLW	0x01
000278   0105     movlb   0x5              	BANKSEL	_requestHandled
00027a   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	479; src/picUSB.c	UEP1 = 0b00011110;
00027c   0e1e     movlw   0x1e             	MOVLW	0x1e
00027e   010f     movlb   0xf              	BANKSEL	_UEP1
000280   6f27     movwf   0x27, 0x1        	MOVWF	_UEP1, B
                                           ; #	MOVLW	0x40
                                           ; #	MOVWF	(_ep_bdt + 12), B
                                           ; #	MOVLW	0x40
                                           ;	.line	483; src/picUSB.c	EP_IN_BD(1).Stat.uc  = 0b01000000;
000282   0e40     movlw   0x40             	MOVLW	0x40
000284   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	486; src/picUSB.c	EP_OUT_BD(1).Cnt  = EP1_BUFFER_SIZE;
000286   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; removed redundant BANKSEL
000288   6f09     movwf   0x9, 0x1         	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	488; src/picUSB.c	EP_OUT_BD(1).ADDR = (unsigned long)&bootCmd;
00028a   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
                                           ; removed redundant BANKSEL
00028c   6f0a     movwf   0xa, 0x1         	MOVWF	(_ep_bdt + 10), B
00028e   0e05     movlw   0x5              	MOVLW	HIGH(_bootCmd)
                                           ; removed redundant BANKSEL
000290   6f0b     movwf   0xb, 0x1         	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	490; src/picUSB.c	EP_OUT_BD(1).Stat.uc = 0b10000000;
000292   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000294   6f08     movwf   0x8, 0x1         	MOVWF	(_ep_bdt + 8), B
                                           ;	.line	492; src/picUSB.c	currentConfiguration = SetupPacket.wValue0;
000296   c542     movff   0x542, 0x5cc     	MOVFF	(_SetupPacket + 2), _currentConfiguration
000298   f5cc
00029a   0105     movlb   0x5              	BANKSEL	_currentConfiguration
                                           ;	.line	495; src/picUSB.c	if (currentConfiguration == 0)
00029c   51cc     movf    0xcc, 0, 0x1     	MOVF	_currentConfiguration, W, B
00029e   e104     bnz     0x2a8            	BNZ	_00205_DS_
                                           ;	.line	498; src/picUSB.c	deviceState = ADDRESS;
0002a0   0e04     movlw   0x4              	MOVLW	0x04
0002a2   0105     movlb   0x5              	BANKSEL	_deviceState
0002a4   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
0002a6   d033     bra     0x30e            	BRA	_00223_DS_
                                           _00205_DS_:
                                           ;	.line	501; src/picUSB.c	deviceState = CONFIGURED;
0002a8   0e05     movlw   0x5              	MOVLW	0x05
0002aa   0105     movlb   0x5              	BANKSEL	_deviceState
0002ac   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
0002ae   d02f     bra     0x30e            	BRA	_00223_DS_
                                           _00216_DS_:
0002b0   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	508; src/picUSB.c	else if (SetupPacket.bRequest == GET_CONFIGURATION)
0002b2   5141     movf    0x41, 0, 0x1     	MOVF	(_SetupPacket + 1), W, B
0002b4   0a08     xorlw   0x8              	XORLW	0x08
0002b6   e10f     bnz     0x2d6            	BNZ	_00213_DS_
                                           ;	.line	510; src/picUSB.c	requestHandled = 1;
0002b8   0e01     movlw   0x1              	MOVLW	0x01
0002ba   0105     movlb   0x5              	BANKSEL	_requestHandled
0002bc   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	511; src/picUSB.c	outPtr = (byte*)&currentConfiguration;
0002be   0e05     movlw   0x5              	MOVLW	HIGH(_currentConfiguration)
0002c0   0105     movlb   0x5              	BANKSEL	(_outPtr + 1)
0002c2   6fc4     movwf   0xc4, 0x1        	MOVWF	(_outPtr + 1), B
0002c4   0ecc     movlw   0xcc             	MOVLW	LOW(_currentConfiguration)
                                           ; removed redundant BANKSEL
0002c6   6fc3     movwf   0xc3, 0x1        	MOVWF	_outPtr, B
0002c8   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0002ca   6fc5     movwf   0xc5, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	512; src/picUSB.c	wCount = 1;
0002cc   0e01     movlw   0x1              	MOVLW	0x01
0002ce   0105     movlb   0x5              	BANKSEL	_wCount
0002d0   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0002d2   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
0002d4   d01c     bra     0x30e            	BRA	_00223_DS_
                                           _00213_DS_:
0002d6   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	527; src/picUSB.c	else if (SetupPacket.bRequest == GET_INTERFACE)
0002d8   5141     movf    0x41, 0, 0x1     	MOVF	(_SetupPacket + 1), W, B
0002da   0a0a     xorlw   0xa              	XORLW	0x0a
0002dc   e111     bnz     0x300            	BNZ	_00210_DS_
                                           ;	.line	531; src/picUSB.c	requestHandled = 1;
0002de   0e01     movlw   0x1              	MOVLW	0x01
0002e0   0105     movlb   0x5              	BANKSEL	_requestHandled
0002e2   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
0002e4   0105     movlb   0x5              	BANKSEL	_controlTransferBuffer
                                           ;	.line	532; src/picUSB.c	controlTransferBuffer[0] = 0;
0002e6   6b00     clrf    0, 0x1           	CLRF	_controlTransferBuffer, B
                                           ;	.line	533; src/picUSB.c	outPtr = (byte *)&controlTransferBuffer;
0002e8   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
0002ea   0105     movlb   0x5              	BANKSEL	(_outPtr + 1)
0002ec   6fc4     movwf   0xc4, 0x1        	MOVWF	(_outPtr + 1), B
0002ee   0e00     movlw   0                	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0002f0   6fc3     movwf   0xc3, 0x1        	MOVWF	_outPtr, B
0002f2   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0002f4   6fc5     movwf   0xc5, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	534; src/picUSB.c	wCount = 1;
0002f6   0e01     movlw   0x1              	MOVLW	0x01
0002f8   0105     movlb   0x5              	BANKSEL	_wCount
0002fa   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0002fc   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
0002fe   d007     bra     0x30e            	BRA	_00223_DS_
                                           _00210_DS_:
000300   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	537; src/picUSB.c	else if (SetupPacket.bRequest == SET_INTERFACE)
000302   5141     movf    0x41, 0, 0x1     	MOVF	(_SetupPacket + 1), W, B
000304   0a0b     xorlw   0xb              	XORLW	0x0b
000306   e103     bnz     0x30e            	BNZ	_00223_DS_
                                           ;	.line	540; src/picUSB.c	requestHandled = 1;
000308   0e01     movlw   0x1              	MOVLW	0x01
00030a   0105     movlb   0x5              	BANKSEL	_requestHandled
00030c   6fcd     movwf   0xcd, 0x1        	MOVWF	_requestHandled, B
                                           _00223_DS_:
00030e   0105     movlb   0x5              	BANKSEL	_requestHandled
                                           ;	.line	553; src/picUSB.c	if (!requestHandled)
000310   51cd     movf    0xcd, 0, 0x1     	MOVF	_requestHandled, W, B
000312   e10b     bnz     0x32a            	BNZ	_00230_DS_
                                           ;	.line	556; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000314   0e40     movlw   0x40             	MOVLW	0x40
000316   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000318   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	558; src/picUSB.c	EP_OUT_BD(0).ADDR = (unsigned long)&SetupPacket;
00031a   0e40     movlw   0x40             	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
00031c   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
00031e   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000320   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ; #	MOVLW	0x84
                                           ; #	MOVWF	_ep_bdt, B
                                           ; #	MOVLW	0x84
                                           ;	.line	559; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
000322   0e84     movlw   0x84             	MOVLW	0x84
                                           ; removed redundant BANKSEL
                                           ;	.line	560; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
000324   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
000326   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000328   d035     bra     0x394            	BRA	_00231_DS_
                                           _00230_DS_:
00032a   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	563; src/picUSB.c	else if (SetupPacket.bmRequestType & 0x80)
00032c   af40     btfss   0x40, 0x7, 0x1   	BTFSS	_SetupPacket, 7, B
00032e   d023     bra     0x376            	BRA	_00227_DS_
000330   0105     movlb   0x5              	BANKSEL	(_wCount + 1)
                                           ;	.line	566; src/picUSB.c	if(SetupPacket.wLength < wCount)
000332   51c7     movf    0xc7, 0, 0x1     	MOVF	(_wCount + 1), W, B
000334   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 7)
000336   5d47     subwf   0x47, 0, 0x1     	SUBWF	(_SetupPacket + 7), W, B
000338   e104     bnz     0x342            	BNZ	_00448_DS_
00033a   0105     movlb   0x5              	BANKSEL	_wCount
00033c   51c6     movf    0xc6, 0, 0x1     	MOVF	_wCount, W, B
00033e   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 6)
000340   5d46     subwf   0x46, 0, 0x1     	SUBWF	(_SetupPacket + 6), W, B
                                           _00448_DS_:
000342   e204     bc      0x34c            	BC	_00225_DS_
                                           ;	.line	567; src/picUSB.c	wCount = SetupPacket.wLength;
000344   c546     movff   0x546, 0x5c6     	MOVFF	(_SetupPacket + 6), _wCount
000346   f5c6
000348   c547     movff   0x547, 0x5c7     	MOVFF	(_SetupPacket + 7), (_wCount + 1)
00034a   f5c7
                                           _00225_DS_:
                                           ;	.line	569; src/picUSB.c	InDataStage();
00034c   ec93     call    0x726, 0         	CALL	_InDataStage
00034e   f003
                                           ;	.line	570; src/picUSB.c	ctrlTransferStage = DATA_IN_STAGE;
000350   0e02     movlw   0x2              	MOVLW	0x02
000352   0105     movlb   0x5              	BANKSEL	_ctrlTransferStage
000354   6fca     movwf   0xca, 0x1        	MOVWF	_ctrlTransferStage, B
                                           ;	.line	572; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000356   0e40     movlw   0x40             	MOVLW	0x40
000358   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
00035a   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	574; src/picUSB.c	EP_OUT_BD(0).ADDR = (unsigned long)&SetupPacket;
00035c   0e40     movlw   0x40             	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
00035e   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000360   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000362   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	575; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN;
000364   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000366   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ;	.line	579; src/picUSB.c	EP_IN_BD(0).ADDR = (unsigned long)&controlTransferBuffer;
000368   0e00     movlw   0                	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00036a   6f06     movwf   0x6, 0x1         	MOVWF	(_ep_bdt + 6), B
00036c   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00036e   6f07     movwf   0x7, 0x1         	MOVWF	(_ep_bdt + 7), B
                                           ;	.line	581; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000370   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
000372   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000374   d00f     bra     0x394            	BRA	_00231_DS_
                                           _00227_DS_:
                                           ;	.line	587; src/picUSB.c	ctrlTransferStage = DATA_OUT_STAGE;
000376   0e01     movlw   0x1              	MOVLW	0x01
000378   0105     movlb   0x5              	BANKSEL	_ctrlTransferStage
00037a   6fca     movwf   0xca, 0x1        	MOVWF	_ctrlTransferStage, B
00037c   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 5)
                                           ;	.line	590; src/picUSB.c	EP_IN_BD(0).Cnt = 0;
00037e   6b05     clrf    0x5, 0x1         	CLRF	(_ep_bdt + 5), B
                                           ;	.line	591; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000380   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
000382   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ;	.line	594; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000384   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
000386   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	596; src/picUSB.c	EP_OUT_BD(0).ADDR = (unsigned long)&controlTransferBuffer;
000388   0e00     movlw   0                	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00038a   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
00038c   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00038e   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	598; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000390   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
000392   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           _00231_DS_:
                                           ;	.line	602; src/picUSB.c	UCONbits.PKTDIS = 0;
000394   9865     bcf     0x65, 0x4, 0     	BCF	_UCONbits, 4
000396   d086     bra     0x4a4            	BRA	_00260_DS_
                                           _00240_DS_:
000398   0105     movlb   0x5              	BANKSEL	_ctrlTransferStage
                                           ;	.line	605; src/picUSB.c	else if (ctrlTransferStage == DATA_OUT_STAGE)
00039a   51ca     movf    0xca, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
00039c   0a01     xorlw   0x1              	XORLW	0x01
00039e   e001     bz      0x3a2            	BZ	_00450_DS_
0003a0   d055     bra     0x44c            	BRA	_00237_DS_
                                           _00450_DS_:
                                           ;	.line	614; src/picUSB.c	bufferSize = ((0x03 & EP_OUT_BD(0).Stat.uc) << 8) | EP_OUT_BD(0).Cnt;
0003a2   0e03     movlw   0x3              	MOVLW	0x03
0003a4   0104     movlb   0x4              	BANKSEL	_ep_bdt
0003a6   1500     andwf   0, 0, 0x1        	ANDWF	_ep_bdt, W, B
0003a8   6a02     clrf    0x2, 0           	CLRF	r0x02
0003aa   6e04     movwf   0x4, 0           	MOVWF	r0x04
0003ac   6a03     clrf    0x3, 0           	CLRF	r0x03
0003ae   c401     movff   0x401, 0x1       	MOVFF	(_ep_bdt + 1), r0x01
0003b0   f001
0003b2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0003b4   1201     iorwf   0x1, 0x1, 0      	IORWF	r0x01, F
0003b6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0003b8   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
                                           ;	.line	617; src/picUSB.c	wCount = wCount + bufferSize;
0003ba   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0003bc   0105     movlb   0x5              	BANKSEL	_wCount
0003be   27c6     addwf   0xc6, 0x1, 0x1   	ADDWF	_wCount, F, B
0003c0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0003c2   23c7     addwfc  0xc7, 0x1, 0x1   	ADDWFC	(_wCount + 1), F, B
                                           ;	.line	619; src/picUSB.c	outPtr = (byte*)&controlTransferBuffer;
0003c4   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
0003c6   0105     movlb   0x5              	BANKSEL	(_outPtr + 1)
0003c8   6fc4     movwf   0xc4, 0x1        	MOVWF	(_outPtr + 1), B
0003ca   0e00     movlw   0                	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0003cc   6fc3     movwf   0xc3, 0x1        	MOVWF	_outPtr, B
0003ce   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0003d0   6fc5     movwf   0xc5, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	621; src/picUSB.c	for (i=0;i<bufferSize;i++)
0003d2   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00265_DS_:
0003d4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0003d6   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
0003d8   e102     bnz     0x3de            	BNZ	_00453_DS_
0003da   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0003dc   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
                                           _00453_DS_:
0003de   e22c     bc      0x438            	BC	_00232_DS_
                                           ;	.line	622; src/picUSB.c	*inPtr++ = *outPtr++;
0003e0   c5c0     movff   0x5c0, 0x5       	MOVFF	_inPtr, r0x05
0003e2   f005
0003e4   c5c1     movff   0x5c1, 0x6       	MOVFF	(_inPtr + 1), r0x06
0003e6   f006
0003e8   c5c2     movff   0x5c2, 0x7       	MOVFF	(_inPtr + 2), r0x07
0003ea   f007
0003ec   c5c3     movff   0x5c3, 0x8       	MOVFF	_outPtr, r0x08
0003ee   f008
0003f0   c5c4     movff   0x5c4, 0x9       	MOVFF	(_outPtr + 1), r0x09
0003f2   f009
0003f4   c5c5     movff   0x5c5, 0xa       	MOVFF	(_outPtr + 2), r0x0a
0003f6   f00a
0003f8   c008     movff   0x8, 0xfe9       	MOVFF	r0x08, FSR0L
0003fa   ffe9
0003fc   c009     movff   0x9, 0xff3       	MOVFF	r0x09, PRODL
0003fe   fff3
000400   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000402   ece7     call    0x9ce, 0         	CALL	__gptrget1
000404   f004
000406   6e08     movwf   0x8, 0           	MOVWF	r0x08
000408   0105     movlb   0x5              	BANKSEL	_outPtr
00040a   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_outPtr, F, B
00040c   e303     bnc     0x414            	BNC	_00454_DS_
                                           ; removed redundant BANKSEL
00040e   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
000410   d001     bra     0x414            	BRA	_10163_DS_
                                           ; removed redundant BANKSEL
000412   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _10163_DS_:
                                           _00454_DS_:
000414   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000416   ffe5
000418   c005     movff   0x5, 0xfe9       	MOVFF	r0x05, FSR0L
00041a   ffe9
00041c   c006     movff   0x6, 0xff3       	MOVFF	r0x06, PRODL
00041e   fff3
000420   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000422   ec05     call    0xa0a, 0         	CALL	__gptrput1
000424   f005
000426   0105     movlb   0x5              	BANKSEL	_inPtr
000428   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_inPtr, F, B
00042a   e303     bnc     0x432            	BNC	_00455_DS_
                                           ; removed redundant BANKSEL
00042c   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
00042e   d001     bra     0x432            	BRA	_20164_DS_
                                           ; removed redundant BANKSEL
000430   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _20164_DS_:
                                           _00455_DS_:
                                           ;	.line	621; src/picUSB.c	for (i=0;i<bufferSize;i++)
000432   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000434   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000436   d7ce     bra     0x3d4            	BRA	_00265_DS_
                                           _00232_DS_:
000438   0104     movlb   0x4              	BANKSEL	_ep_bdt
                                           ;	.line	625; src/picUSB.c	if(EP_OUT_BD(0).Stat.DTS)
00043a   ad00     btfss   0, 0x6, 0x1      	BTFSS	_ep_bdt, 6, B
00043c   d003     bra     0x444            	BRA	_00234_DS_
                                           ;	.line	626; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
00043e   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000440   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
000442   d030     bra     0x4a4            	BRA	_00260_DS_
                                           _00234_DS_:
                                           ;	.line	628; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000444   0ec8     movlw   0xc8             	MOVLW	0xc8
000446   0104     movlb   0x4              	BANKSEL	_ep_bdt
000448   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
00044a   d02c     bra     0x4a4            	BRA	_00260_DS_
                                           _00237_DS_:
                                           ;	.line	634; src/picUSB.c	WaitForSetupStage();
00044c   ecf8     call    0x9f0, 0         	CALL	_WaitForSetupStage
00044e   f004
000450   d029     bra     0x4a4            	BRA	_00260_DS_
                                           _00254_DS_:
000452   010f     movlb   0xf              	BANKSEL	_UADDR
                                           ;	.line	641; src/picUSB.c	if ((UADDR == 0) && (deviceState == ADDRESS))
000454   5138     movf    0x38, 0, 0x1     	MOVF	_UADDR, W, B
000456   e10c     bnz     0x470            	BNZ	_00245_DS_
000458   0105     movlb   0x5              	BANKSEL	_deviceState
00045a   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
00045c   0a04     xorlw   0x4              	XORLW	0x04
00045e   e108     bnz     0x470            	BNZ	_00245_DS_
                                           ;	.line	645; src/picUSB.c	UADDR = SetupPacket.wValue0;
000460   c542     movff   0x542, 0xf38     	MOVFF	(_SetupPacket + 2), _UADDR
000462   ff38
000464   010f     movlb   0xf              	BANKSEL	_UADDR
                                           ;	.line	646; src/picUSB.c	if(UADDR == 0)
000466   5138     movf    0x38, 0, 0x1     	MOVF	_UADDR, W, B
000468   e103     bnz     0x470            	BNZ	_00245_DS_
                                           ;	.line	649; src/picUSB.c	deviceState = DEFAULT;
00046a   0e03     movlw   0x3              	MOVLW	0x03
00046c   0105     movlb   0x5              	BANKSEL	_deviceState
00046e   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00245_DS_:
000470   0105     movlb   0x5              	BANKSEL	_ctrlTransferStage
                                           ;	.line	652; src/picUSB.c	if (ctrlTransferStage == DATA_IN_STAGE)
000472   51ca     movf    0xca, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
000474   0a02     xorlw   0x2              	XORLW	0x02
000476   e10c     bnz     0x490            	BNZ	_00251_DS_
                                           ;	.line	655; src/picUSB.c	InDataStage();
000478   ec93     call    0x726, 0         	CALL	_InDataStage
00047a   f003
00047c   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	658; src/picUSB.c	if(EP_IN_BD(0).Stat.DTS)
00047e   ad04     btfss   0x4, 0x6, 0x1    	BTFSS	(_ep_bdt + 4), 6, B
000480   d003     bra     0x488            	BRA	_00248_DS_
                                           ;	.line	659; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
000482   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000484   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000486   d00e     bra     0x4a4            	BRA	_00260_DS_
                                           _00248_DS_:
                                           ;	.line	661; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000488   0ec8     movlw   0xc8             	MOVLW	0xc8
00048a   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
00048c   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
00048e   d00a     bra     0x4a4            	BRA	_00260_DS_
                                           _00251_DS_:
                                           ;	.line	667; src/picUSB.c	WaitForSetupStage();
000490   ecf8     call    0x9f0, 0         	CALL	_WaitForSetupStage
000492   f004
000494   d007     bra     0x4a4            	BRA	_00260_DS_
                                           _00259_DS_:
                                           ;	.line	676; src/picUSB.c	if (!USTATbits.DIR) // If OUT
000496   b464     btfsc   0x64, 0x2, 0     	BTFSC	_USTATbits, 2
000498   d005     bra     0x4a4            	BRA	_00260_DS_
                                           ;	.line	677; src/picUSB.c	usb_ep_data_out_callback(end_point);
00049a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00049c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00049e   ec6a     call    0x4d4, 0         	CALL	_usb_ep_data_out_callback
0004a0   f002
0004a2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00260_DS_:
                                           ;	.line	681; src/picUSB.c	UIRbits.TRNIF = 0;
0004a4   9662     bcf     0x62, 0x3, 0     	BCF	_UIRbits, 3
                                           _00267_DS_:
0004a6   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
0004a8   f00a
0004aa   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
0004ac   f009
0004ae   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0004b0   f008
0004b2   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0004b4   f007
0004b6   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0004b8   f006
0004ba   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0004bc   f005
0004be   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0004c0   f004
0004c2   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0004c4   f003
0004c6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0004c8   f002
0004ca   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0004cc   f001
0004ce   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0004d0   f000
0004d2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__EnableUSBModule	code
                                           _EnableUSBModule:
                                           ;	.line	231; src/picUSB.c	if(UCONbits.USBEN == 0)
00099c   b665     btfsc   0x65, 0x3, 0     	BTFSC	_UCONbits, 3
00099e   d007     bra     0x9ae            	BRA	_00142_DS_
                                           ;	.line	233; src/picUSB.c	UCON = 0;               // USB Control Register
0009a0   6a65     clrf    0x65, 0          	CLRF	_UCON
0009a2   010f     movlb   0xf              	BANKSEL	_UIE
                                           ;	.line	234; src/picUSB.c	UIE = 0;                // Disable USB Interrupt Register
0009a4   6b36     clrf    0x36, 0x1        	CLRF	_UIE, B
                                           ;	.line	235; src/picUSB.c	UCONbits.USBEN = 1;     // Enable USB module
0009a6   8665     bsf     0x65, 0x3, 0     	BSF	_UCONbits, 3
                                           ;	.line	236; src/picUSB.c	deviceState = ATTACHED;
0009a8   0e01     movlw   0x1              	MOVLW	0x01
0009aa   0105     movlb   0x5              	BANKSEL	_deviceState
0009ac   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00142_DS_:
0009ae   0105     movlb   0x5              	BANKSEL	_deviceState
                                           ;	.line	240; src/picUSB.c	if ((deviceState == ATTACHED) && !UCONbits.SE0)
0009b0   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
0009b2   0a01     xorlw   0x1              	XORLW	0x01
0009b4   e10b     bnz     0x9cc            	BNZ	_00146_DS_
0009b6   ba65     btfsc   0x65, 0x5, 0     	BTFSC	_UCONbits, 5
0009b8   d009     bra     0x9cc            	BRA	_00146_DS_
                                           ;	.line	242; src/picUSB.c	UIR = 0;
0009ba   6a62     clrf    0x62, 0          	CLRF	_UIR
0009bc   010f     movlb   0xf              	BANKSEL	_UIE
                                           ;	.line	243; src/picUSB.c	UIE = 0;                // Disable USB Interrupt Register
0009be   6b36     clrf    0x36, 0x1        	CLRF	_UIE, B
0009c0   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	244; src/picUSB.c	UIEbits.URSTIE = 1;     // Enable USB Reset Interrupt
0009c2   8136     bsf     0x36, 0, 0x1     	BSF	_UIEbits, 0, B
                                           ;	.line	245; src/picUSB.c	UIEbits.IDLEIE = 1;     // Enable IDle Detect USB Interrupt
0009c4   8936     bsf     0x36, 0x4, 0x1   	BSF	_UIEbits, 4, B
                                           ;	.line	246; src/picUSB.c	deviceState = POWERED;
0009c6   0e02     movlw   0x2              	MOVLW	0x02
0009c8   0105     movlb   0x5              	BANKSEL	_deviceState
0009ca   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00146_DS_:
0009cc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__WaitForSetupStage	code
                                           _WaitForSetupStage:
0009f0   0105     movlb   0x5              	BANKSEL	_ctrlTransferStage
                                           ;	.line	218; src/picUSB.c	ctrlTransferStage = SETUP_STAGE;
0009f2   6bca     clrf    0xca, 0x1        	CLRF	_ctrlTransferStage, B
                                           ;	.line	219; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
0009f4   0e40     movlw   0x40             	MOVLW	0x40
0009f6   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
0009f8   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	221; src/picUSB.c	EP_OUT_BD(0).ADDR = (unsigned long)&SetupPacket;
0009fa   0e40     movlw   0x40             	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
0009fc   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
0009fe   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000a00   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	223; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
000a02   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000a04   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
                                           ;	.line	224; src/picUSB.c	EP_IN_BD(0).Stat.uc = 0x00;           // Give control to CPU
000a06   6b04     clrf    0x4, 0x1         	CLRF	(_ep_bdt + 4), B
000a08   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__InDataStage	code
                                           _InDataStage:
                                           ;	.line	180; src/picUSB.c	void InDataStage()
000726   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000728   ffe5
00072a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00072c   ffe5
00072e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000730   ffe5
000732   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000734   ffe5
000736   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000738   ffe5
00073a   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00073c   ffe5
00073e   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000740   ffe5
000742   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000744   ffe5
000746   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000748   ffe5
                                           ;	.line	186; src/picUSB.c	if(wCount < EP0_BUFFER_SIZE)
00074a   0e00     movlw   0                	MOVLW	0x00
00074c   0105     movlb   0x5              	BANKSEL	(_wCount + 1)
00074e   5dc7     subwf   0xc7, 0, 0x1     	SUBWF	(_wCount + 1), W, B
000750   e102     bnz     0x756            	BNZ	_00124_DS_
000752   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
000754   5dc6     subwf   0xc6, 0, 0x1     	SUBWF	_wCount, W, B
                                           _00124_DS_:
000756   e205     bc      0x762            	BC	_00106_DS_
                                           ;	.line	187; src/picUSB.c	bufferSize = wCount;
000758   c5c6     movff   0x5c6, 0         	MOVFF	_wCount, r0x00
00075a   f000
00075c   c5c7     movff   0x5c7, 0x1       	MOVFF	(_wCount + 1), r0x01
00075e   f001
000760   d003     bra     0x768            	BRA	_00107_DS_
                                           _00106_DS_:
                                           ;	.line	189; src/picUSB.c	bufferSize = EP0_BUFFER_SIZE;
000762   0e40     movlw   0x40             	MOVLW	0x40
000764   6e00     movwf   0, 0             	MOVWF	r0x00
000766   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           _00107_DS_:
000768   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	193; src/picUSB.c	EP_IN_BD(0).Stat.uc &= ~(BDS_BC8 | BDS_BC9);
00076a   5104     movf    0x4, 0, 0x1      	MOVF	(_ep_bdt + 4), W, B
00076c   6e02     movwf   0x2, 0           	MOVWF	r0x02
00076e   0efc     movlw   0xfc             	MOVLW	0xfc
000770   1602     andwf   0x2, 0x1, 0      	ANDWF	r0x02, F
000772   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000774   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ;	.line	194; src/picUSB.c	EP_IN_BD(0).Stat.uc |= (byte)((bufferSize & 0x0300) >> 8);
000776   0e03     movlw   0x3              	MOVLW	0x03
000778   1401     andwf   0x1, 0, 0        	ANDWF	r0x01, W
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
00077a   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ; removed redundant BANKSEL
00077c   5104     movf    0x4, 0, 0x1      	MOVF	(_ep_bdt + 4), W, B
00077e   1202     iorwf   0x2, 0x1, 0      	IORWF	r0x02, F
000780   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000782   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ; #	MOVF	r0x00, W
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
                                           ;	.line	195; src/picUSB.c	EP_IN_BD(0).Cnt = (byte)(bufferSize & 0xFF);
000784   5000     movf    0, 0, 0          	MOVF	r0x00, W
000786   6e02     movwf   0x2, 0           	MOVWF	r0x02
                                           ; removed redundant BANKSEL
000788   6f05     movwf   0x5, 0x1         	MOVWF	(_ep_bdt + 5), B
                                           ;	.line	197; src/picUSB.c	EP_IN_BD(0).ADDR = (unsigned long)&controlTransferBuffer;
00078a   0e00     movlw   0                	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00078c   6f06     movwf   0x6, 0x1         	MOVWF	(_ep_bdt + 6), B
00078e   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000790   6f07     movwf   0x7, 0x1         	MOVWF	(_ep_bdt + 7), B
                                           ;	.line	202; src/picUSB.c	wCount = wCount - bufferSize;
000792   5000     movf    0, 0, 0          	MOVF	r0x00, W
000794   0105     movlb   0x5              	BANKSEL	_wCount
000796   5fc6     subwf   0xc6, 0x1, 0x1   	SUBWF	_wCount, F, B
000798   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00079a   5bc7     subwfb  0xc7, 0x1, 0x1   	SUBWFB	(_wCount + 1), F, B
                                           ;	.line	205; src/picUSB.c	inPtr = (byte *)&controlTransferBuffer;
00079c   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
00079e   0105     movlb   0x5              	BANKSEL	(_inPtr + 1)
0007a0   6fc1     movwf   0xc1, 0x1        	MOVWF	(_inPtr + 1), B
0007a2   0e00     movlw   0                	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0007a4   6fc0     movwf   0xc0, 0x1        	MOVWF	_inPtr, B
0007a6   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0007a8   6fc2     movwf   0xc2, 0x1        	MOVWF	(_inPtr + 2), B
                                           ;	.line	207; src/picUSB.c	for (i=0;i<bufferSize;i++)
0007aa   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00110_DS_:
0007ac   c002     movff   0x2, 0x3         	MOVFF	r0x02, r0x03
0007ae   f003
0007b0   6a04     clrf    0x4, 0           	CLRF	r0x04
0007b2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0007b4   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
0007b6   e102     bnz     0x7bc            	BNZ	_00129_DS_
0007b8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0007ba   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
                                           _00129_DS_:
0007bc   e22b     bc      0x814            	BC	_00112_DS_
                                           ;	.line	208; src/picUSB.c	*inPtr++ = *outPtr++;
0007be   c5c0     movff   0x5c0, 0x3       	MOVFF	_inPtr, r0x03
0007c0   f003
0007c2   c5c1     movff   0x5c1, 0x4       	MOVFF	(_inPtr + 1), r0x04
0007c4   f004
0007c6   c5c2     movff   0x5c2, 0x5       	MOVFF	(_inPtr + 2), r0x05
0007c8   f005
0007ca   c5c3     movff   0x5c3, 0x6       	MOVFF	_outPtr, r0x06
0007cc   f006
0007ce   c5c4     movff   0x5c4, 0x7       	MOVFF	(_outPtr + 1), r0x07
0007d0   f007
0007d2   c5c5     movff   0x5c5, 0x8       	MOVFF	(_outPtr + 2), r0x08
0007d4   f008
0007d6   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
0007d8   ffe9
0007da   c007     movff   0x7, 0xff3       	MOVFF	r0x07, PRODL
0007dc   fff3
0007de   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0007e0   ece7     call    0x9ce, 0         	CALL	__gptrget1
0007e2   f004
0007e4   6e06     movwf   0x6, 0           	MOVWF	r0x06
0007e6   0105     movlb   0x5              	BANKSEL	_outPtr
0007e8   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_outPtr, F, B
0007ea   e303     bnc     0x7f2            	BNC	_00130_DS_
                                           ; removed redundant BANKSEL
0007ec   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
0007ee   d001     bra     0x7f2            	BRA	_30165_DS_
                                           ; removed redundant BANKSEL
0007f0   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _30165_DS_:
                                           _00130_DS_:
0007f2   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0007f4   ffe5
0007f6   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0007f8   ffe9
0007fa   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0007fc   fff3
0007fe   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000800   ec05     call    0xa0a, 0         	CALL	__gptrput1
000802   f005
000804   0105     movlb   0x5              	BANKSEL	_inPtr
000806   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_inPtr, F, B
000808   e303     bnc     0x810            	BNC	_00131_DS_
                                           ; removed redundant BANKSEL
00080a   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
00080c   d001     bra     0x810            	BRA	_40166_DS_
                                           ; removed redundant BANKSEL
00080e   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _40166_DS_:
                                           _00131_DS_:
                                           ;	.line	207; src/picUSB.c	for (i=0;i<bufferSize;i++)
000810   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000812   d7cc     bra     0x7ac            	BRA	_00110_DS_
                                           _00112_DS_:
000814   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000816   f008
000818   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00081a   f007
00081c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00081e   f006
000820   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000822   f005
000824   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000826   f004
000828   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00082a   f003
00082c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00082e   f002
000830   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000832   f001
000834   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000836   f000
000838   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _device_descriptor:
000900   0112     movlb   0x12             	DB	0x12, 0x01, 0x00, 0x02, 0xff, 0xff, 0xff, 0x40, 0xd8, 0x04, 0xaa, 0xfe
000902   0200     mulwf   0, 0             
000904   ffff     dw      0xffff           
000906   40ff     rrncf   0xff, 0, 0       
000908   04d8     decf    0xd8, 0, 0       
00090a   feaa     dw      0xfeaa           
00090c   0414     decf    0x14, 0, 0       	DB	0x14, 0x04, 0x01, 0x02, 0x00, 0x01
00090e   0201     mulwf   0x1, 0           
000910   0100     movlb   0                
                                           ; ; Starting pCode block for Ival
                                           _configuration_descriptor:
000912   0209     mulwf   0x9, 0           	DB	0x09, 0x02, 0x20, 0x00, 0x01, 0x01, 0x00, 0xc0, 0x7d, 0x09, 0x04, 0x00
000914   0020     dw      0x20             
000916   0101     movlb   0x1              
000918   c000     movff   0, 0x97d         
00091a   097d
00091c   0004     clrwdt                   
00091e   0200     mulwf   0, 0             	DB	0x00, 0x02, 0xff, 0xff, 0xff, 0x00, 0x07, 0x05, 0x01, 0x02, 0x40, 0x00
000920   ffff     dw      0xffff           
000922   00ff     reset                    
000924   0507     decf    0x7, 0, 0x1      
000926   0201     mulwf   0x1, 0           
000928   0040     dw      0x40             
00092a   0700     decf    0, 0x1, 0x1      	DB	0x00, 0x07, 0x05, 0x81, 0x02, 0x40, 0x00, 0x00
00092c   8105     bsf     0x5, 0, 0x1      
00092e   4002     rrncf   0x2, 0, 0        
000930   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _lang:
000932   0304     mulwf   0x4, 0x1         	DB	0x04, 0x03, 0x09, 0x04
000934   0409     decf    0x9, 0, 0        
                                           ; ; Starting pCode block for Ival
                                           _manu:
000936   030c     mulwf   0xc, 0x1         	DB	0x0c, 0x03, 0x52, 0x00, 0x42, 0x00, 0x2b, 0x00, 0x41, 0x00, 0x47, 0x00
000938   0052     dw      0x52             
00093a   0042     dw      0x42             
00093c   002b     dw      0x2b             
00093e   0041     dw      0x41             
000940   0047     dw      0x47             
                                           ; ; Starting pCode block for Ival
                                           _prod:
000942   0306     mulwf   0x6, 0x1         	DB	0x06, 0x03, 0x50, 0x00, 0x38, 0x00
000944   0050     dw      0x50             
000946   0038     dw      0x38             
                                           ; ; Starting pCode block for Ival
                                           _string_descriptor:
000948   0932     iorlw   0x32             	DB	LOW(_lang), HIGH(_lang), UPPER(_lang), LOW(_manu), HIGH(_manu), UPPER(_manu), LOW(_prod), HIGH(_prod), UPPER(_prod)
00094a   3600     rlcf    0, 0x1, 0        
00094c   0009     tblrd   *+               
00094e   0942     iorlw   0x42             
000950   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1580 (0x062c) bytes ( 1.21%)
                                           ;           	  790 (0x0316) words
                                           ; udata size:	  222 (0x00de) bytes ( 6.31%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.1 #8894 (Oct 11 2013) (Linux)
                                           ; This file was generated Tue Dec 17 16:05:28 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f26j50
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_stack
                                           	global	_stack_end
                                           	global	_reset_isr
                                           	global	_high_priority_isr
                                           	global	_startup
                                           	global	_low_priority_isr
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_main
                                           
                                           
                                           ustat_vectors_00	udata	0X0100
                                           _stack         	res	254
                                           _stack_end     	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_vectors__reset_isr	code	0X000000
                                           _reset_isr:
000000   ef10     goto    0xa20            	goto _startup
000002   f005
                                           	
                                           ; ; Starting pCode block
                                           S_vectors__high_priority_isr	code	0X000008
                                           _high_priority_isr:
000008   ef04     goto    0xc08            	goto 0x0C00 + 0x08
00000a   f006
                                           	
                                           ; ; Starting pCode block
                                           S_vectors__low_priority_isr	code	0X000018
                                           _low_priority_isr:
000018   ef0c     goto    0xc18            	goto 0x0C00 + 0x18
00001a   f006
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_vectors__startup	code
                                           _startup:
000a20   ee11     lfsr    0x1, 0x1fe       	lfsr 1, _stack_end ; initialize the stack pointer
000a22   f0fe
000a24   ee21     lfsr    0x2, 0x1fe       	lfsr 2, _stack_end
000a26   f0fe
                                           	
                                           ;	.line	116; src/vectors.c	main();                     // start bootloader code
000a28   ec1d     call    0x83a, 0         	CALL	_main
000a2a   f004
                                           lockup:
000a2c   d7ff     bra     0xa2c            	bra lockup ; returning from main will lock up
                                           	
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   28 (0x001c) bytes ( 0.02%)
                                           ;           	   14 (0x000e) words
                                           ; udata size:	  255 (0x00ff) bytes ( 7.24%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           	radix dec
                                           
                                           	global	___eeprom_gptrget1
                                           	global	___eeprom_gptrget2
                                           	global	___eeprom_gptrget3
                                           	global	___eeprom_gptrget4
                                           	global	___eeprom_gptrput1
                                           	global	___eeprom_gptrput2
                                           	global	___eeprom_gptrput3
                                           	global	___eeprom_gptrput4
                                           
                                           S___eeprom_gptr_stubs	code
                                           ___eeprom_gptrget1:
                                           ___eeprom_gptrget2:
                                           ___eeprom_gptrget3:
                                           ___eeprom_gptrget4:
                                           ___eeprom_gptrput1:
                                           ___eeprom_gptrput2:
                                           ___eeprom_gptrput3:
                                           ___eeprom_gptrput4:
000004   0012     return  0                	return
                                           
                                           	end
